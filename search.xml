<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Kubernetes实战</title>
    <url>/2024/07/30/MiniKube%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><h4 id="1、卸载宝塔面板（可选）"><a href="#1、卸载宝塔面板（可选）" class="headerlink" title="1、卸载宝塔面板（可选）"></a>1、卸载宝塔面板（可选）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载脚本</span><br><span class="line">wget http://download.bt.cn/install/bt-uninstall.sh</span><br><span class="line">执行脚本</span><br><span class="line">sh bt-uninstall.sh</span><br></pre></td></tr></table></figure>

<h4 id="2、安装docker"><a href="#2、安装docker" class="headerlink" title="2、安装docker"></a>2、安装docker</h4><ul>
<li>先删除本机旧的或者残留的docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-engine</span><br></pre></td></tr></table></figure>

<ul>
<li>安装依赖</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y &amp;&amp; <span class="built_in">sudo</span> yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<ul>
<li>配置镜像源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 阿里源</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"># 清华源</span><br><span class="line">yum-config-manager --add-repo https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<ul>
<li>安装（二选一）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<ul>
<li>安装指定版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">docker-ce.x86_64                3:26.1.3-1.el8                  docker-ce-stable</span><br><span class="line">docker-ce.x86_64                3:26.1.2-1.el8                  docker-ce-stable</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择版本安装 例如docker-ce-26.1.3</span></span><br><span class="line"><span class="comment"># yum install docker-ce-&lt;版本号&gt; docker-ce-cli-&lt;版本号&gt; containerd.io</span></span><br><span class="line">yum install docker-ce-26.1.3 docker-ce-cli-26.1.3</span><br></pre></td></tr></table></figure>

<ul>
<li>安装containerd（上一步好像会安装依赖，没有的话就按以下步骤安装）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用rpm -qa命令查看是否安装</span><br><span class="line"># rpm -qa | grep containerd</span><br><span class="line">containerd.io-1.6.32-3.1.el8.x86_64</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看YUM源中containerd版本</span></span><br><span class="line">yum list | grep containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y install containerd.io-&lt;版本号&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置containerd服务启动及开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br><span class="line">systemctl start containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证启动成功</span></span><br><span class="line">systemctl status containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Containerd客户端及服务端相关信息</span></span><br><span class="line">ctr version</span><br></pre></td></tr></table></figure>

<ul>
<li>验证docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>

<ul>
<li>启动并设置开机自启</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="docker启动报错"><a href="#docker启动报错" class="headerlink" title="docker启动报错"></a>docker启动报错</h5><p>更新<code>docker</code>后启动报错，以下指令都在<code>root</code>用户下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">[root@localhost ~]# service docker start</span><br><span class="line">Redirecting to /bin/systemctl start docker.service</span><br><span class="line">Job <span class="keyword">for</span> docker.service failed because the control process exited with error code.</span><br><span class="line">See <span class="string">&quot;systemctl status docker.service&quot;</span> and <span class="string">&quot;journalctl -xe&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker状态</span></span><br><span class="line">[root@localhost ~]# systemctl status docker.service</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: exit-code) since Wed 2024-07-31 09:06:33 CST; 8s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line">  Process: 2391 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock (code=exited, status=1/FAILURE)</span><br><span class="line"> Main PID: 2391 (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: docker.service: Service RestartSec=2s expired, scheduling restart.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: docker.service: Scheduled restart job, restart counter is at 3.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: Stopped Docker Application Container Engine.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: docker.service: Start request repeated too quickly.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: docker.service: Failed with result <span class="string">&#x27;exit-code&#x27;</span>.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: Failed to start Docker Application Container Engine.</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调试</span></span><br><span class="line">[root@localhost ~]# dockerd --debug                                </span><br><span class="line">...</span><br><span class="line">WARN[2024-07-31T09:21:50.599480393+08:00] could not create bridge network <span class="keyword">for</span> <span class="built_in">id</span> 20e6fbfeebea5ebc9eb3be5e518399a886084976f33980d8d42ef4ee13401c34 bridge name docker0 <span class="keyword">while</span> booting up from persistent state: Failed to program NAT chain: ZONE_CONFLICT: <span class="string">&#x27;docker0&#x27;</span> already bound to a zone </span><br><span class="line">...</span><br><span class="line">failed to start daemon: Error initializing network controller: error creating default <span class="string">&quot;bridge&quot;</span> network: Failed to program NAT chain: ZONE_CONFLICT: <span class="string">&#x27;docker0&#x27;</span> already bound to a zone</span><br></pre></td></tr></table></figure>

<p>问题定位和解决:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取当前活动的防火墙区域（zones）信息</span></span><br><span class="line">[root@localhost ~]# firewall-cmd --get-active-zones</span><br><span class="line">public</span><br><span class="line">  interfaces: ens160</span><br><span class="line">trusted</span><br><span class="line">  interfaces: docker0</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 移除docker0</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --permanent --zone=trusted --remove-interface=docker0</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line"><span class="comment"># 删除daemon 或备份到别的地方</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>发现启动还是报错，继续dockerd –debug，现在报错如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">failed to start daemon: Error initializing network controller: error creating default <span class="string">&quot;bridge&quot;</span> network: cannot create network 96b0b8273474a5cdf644ad11bf60c5f0a752ee63d05a5af6d22c433af6a4c4b2 (docker0): conflicts with network 20e6fbfeebea5ebc9eb3be5e518399a886084976f33980d8d42ef4ee13401c34 (docker0): networks have same bridge name</span><br></pre></td></tr></table></figure>

<p>怀疑问题出在<code>/var/docker/network/</code>，有很多socket存储在bridge上，这些socket都是用bridge的旧 ID 引用的。删除所有的套接字，删除接口，然后启动 docker，但所有容器都会因为套接字消失而无法工作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip <span class="built_in">link</span> del docker0</span><br><span class="line"><span class="built_in">rm</span> -rf /var/docker/network/*</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/docker/network/files</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># delete all containers</span></span><br><span class="line">docker ps -a | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f 1 | xargs -n 1 <span class="built_in">echo</span> docker <span class="built_in">rm</span>  -f</span><br><span class="line"><span class="comment"># recreate all containers</span></span><br></pre></td></tr></table></figure>

<p>使用k8s时，最好修改docker cgroup驱动，与k8s一致，使用systemd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改docker cgroup驱动：native.cgroupdriver=systemd</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">  &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  # 镜像加速：https://github.com/dongyubin/DockerHub?tab=readme-ov-file</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">  	&quot;https://docker.mrxn.net&quot;,</span></span><br><span class="line"><span class="string">  	&quot;https://dockerhub.icu&quot;,</span></span><br><span class="line"><span class="string">  	&quot;https://doublezonline.cloud&quot;,</span></span><br><span class="line"><span class="string">  	&quot;https://docker.mrxn.net&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># 重启使配置生效</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://docker.mrxn.net&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h4 id="3、安装kubectl"><a href="#3、安装kubectl" class="headerlink" title="3、安装kubectl"></a>3、安装kubectl</h4><p>安装最新版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl</span><br></pre></td></tr></table></figure>

<p>安装指定版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl</span><br></pre></td></tr></table></figure>

<p>把安装包移动到path目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br></pre></td></tr></table></figure>

<p>增加执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x kubectl</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h2><p><strong>官方文档</strong>：<a href="https://kubernetes.io/zh-cn/docs/home/">Kubernetes 文档 | Kubernetes</a></p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，方便进行声明式配置和自动化。</p>
<h3 id="MiniKube"><a href="#MiniKube" class="headerlink" title="MiniKube"></a>MiniKube</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Linux安装，选择对应cpu架构版本，通过<code>lscpu</code>命令查询cpu架构，其余架构类推</p>
<p>X86-64架构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line"><span class="built_in">sudo</span> install minikube-linux-amd64 /usr/local/bin/minikube &amp;&amp; <span class="built_in">rm</span> minikube-linux-amd64</span><br></pre></td></tr></table></figure>

<p>ARM64架构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-arm64</span><br><span class="line"><span class="built_in">sudo</span> install minikube-linux-arm64 /usr/local/bin/minikube &amp;&amp; <span class="built_in">rm</span> minikube-linux-arm64</span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><strong>注意：无法使用root启动</strong>，添加<code>test</code>用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser <span class="built_in">test</span></span><br><span class="line">passwd <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 切换普通用户</span></span><br><span class="line">su - username</span><br><span class="line"><span class="comment"># 切换root，要求输入root密码</span></span><br><span class="line">su -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>普通用户执行sudo 命令报错：test 不在 sudoers 文件中。此事将被报告。</p>
<p>在root用户下执行 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ll /etc/sudoers</span></span><br><span class="line"><span class="comment"># 给root用户加可写权限</span></span><br><span class="line"><span class="built_in">chmod</span> 640 /etc/sudoers</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 搜索文本：## Allow root to run any commands anywhere</span></span><br><span class="line"><span class="comment"># 在root下加入 test ALL=(ALL) ALL</span></span><br><span class="line"><span class="comment"># 还原权限</span></span><br><span class="line"><span class="built_in">chmod</span> 440 /etc/sudoers</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">minikube start</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172-12-0-1 ~]# minikube start</span><br><span class="line">* Centos 8.5.2111 上的 minikube v1.33.1</span><br><span class="line">* 根据用户配置使用 docker 驱动程序</span><br><span class="line">* The <span class="string">&quot;docker&quot;</span> driver should not be used with root privileges. If you wish to <span class="built_in">continue</span> as root, use --force.</span><br><span class="line">* 如果您在VM中运行 minikube，请考虑使用 --driver=none:</span><br><span class="line">*   https://minikube.sigs.k8s.io/docs/reference/drivers/none/</span><br><span class="line"></span><br><span class="line">X 因 DRV_AS_ROOT 错误而退出：docker 驱动不应使用 root 权限。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：root账号启动docker导致无法启动</p>
</blockquote>
<blockquote>
<p>解决：先用root用户关闭docker，然后用test用户启动</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停用</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 停用报错：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@172-12-0-1 ~]# systemctl stop docker</span><br><span class="line">Warning: Stopping docker.service, but it can still be activated by:</span><br><span class="line">  docker.socket</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：docker默认开启自动唤醒机制，在关闭状态下被访问会自动唤醒docker</p>
</blockquote>
<blockquote>
<p>解决：停用自动唤醒机制</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 停用自动唤醒机制</span><br><span class="line">systemctl stop docker.socket</span><br><span class="line"># 停用docker</span><br><span class="line">systemctl stop docker</span><br><span class="line"># 启用</span><br><span class="line">systemctl start docker.socket</span><br></pre></td></tr></table></figure>

<hr>
<p>再次启用<code>minikube</code>，还是报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ minikube start</span><br><span class="line">* Centos 8.5.2111 上的 minikube v1.33.1</span><br><span class="line">* Unable to pick a default driver. Here is what was considered, <span class="keyword">in</span> preference order:</span><br><span class="line">  - docker: Not healthy: <span class="string">&quot;docker version --format &#123;&#123;.Server.Os&#125;&#125;-&#123;&#123;.Server.Version&#125;&#125;:&#123;&#123;.Server.Platform.Name&#125;&#125;&quot;</span> <span class="built_in">exit</span> status 1: permission denied <span class="keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get <span class="string">&quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.45/version&quot;</span>: dial unix /var/run/docker.sock: connect: permission denied</span><br><span class="line">  - docker：建议：Add your user to the <span class="string">&#x27;docker&#x27;</span> group: <span class="string">&#x27;sudo usermod -aG docker $USER &amp;&amp; newgrp docker&#x27;</span> &lt;https://docs.docker.com/engine/install/linux-postinstall/&gt;</span><br><span class="line">* 或者你也可以安装以下驱动程序：</span><br><span class="line">  - kvm2: Not installed: <span class="built_in">exec</span>: <span class="string">&quot;virsh&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line">  - qemu2: Not installed: <span class="built_in">exec</span>: <span class="string">&quot;qemu-system-x86_64&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line">  - podman: Not installed: <span class="built_in">exec</span>: <span class="string">&quot;podman&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line">  - virtualbox: Not installed: unable to find VBoxManage <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">X 因 DRV_NOT_HEALTHY 错误而退出：找到个驱动程序，但没有一个是健康的。有关如何修复已安装的驱动程序的建议，请参阅上文。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：需要docker组启动</p>
</blockquote>
<blockquote>
<p>解决：将test用户加入docker组</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建docker组</span></span><br><span class="line"><span class="built_in">sudo</span> groupadd docker</span><br><span class="line"><span class="comment"># 将test用户添加到docker组</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 切换root用户设置docker组密码</span></span><br><span class="line">su -</span><br><span class="line">gpasswd docker</span><br><span class="line"><span class="comment"># test用户激活对组的修改</span></span><br><span class="line">su - <span class="built_in">test</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure>

<p>再次运行<code>minikube start</code>，会下载<code>Kubernetes</code> 的预加载文件，下载image失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E0731 11:24:42.377184    4531 cache.go:189] Error downloading kic artifacts:  failed to download kic base image or any fallback image</span><br><span class="line">...</span><br><span class="line">X 因 GUEST_PROVISION 错误而退出：error provisioning guest: Failed to start host: recreate: creating host: create: creating: setting up container node: preparing volume <span class="keyword">for</span> minikube container: docker run --<span class="built_in">rm</span> --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=<span class="literal">true</span> --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -d /var/lib: <span class="built_in">exit</span> status 125</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：1、k8s使用的docker Registry是google container register，在国内无法访问，所以image会拉取失败</p>
<p>2、因为有个镜像下载不下来，这个镜像不是从阿里云上下载的 gcr.io&#x2F;k8s-minikube&#x2F;kicbase:v0.0.10</p>
</blockquote>
<blockquote>
<p>解决：1、start 命令后添加镜像地区参数</p>
<p>2、查找替代的镜像，比如anjone&#x2F;kicbase</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上边拉取失败，删除iamge</span></span><br><span class="line">minikube delete</span><br><span class="line"><span class="comment">#下载对应镜像</span></span><br><span class="line">docker pull anjone/kicbase</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">minikube start --vm-driver=docker --base-image=<span class="string">&quot;anjone/kicbase&quot;</span> --image-mirror-country=<span class="string">&#x27;cn&#x27;</span> --kubernetes-version=v1.22.3</span><br></pre></td></tr></table></figure>

<p>启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">* 正在验证 Kubernetes 组件...</span><br><span class="line">  - 正在使用镜像 registry.cn-hangzhou.aliyuncs.com/google_containers/storage-provisioner:v5</span><br><span class="line">* 启用插件： storage-provisioner, default-storageclass</span><br><span class="line">* kubectl 未找到。如果你需要使用它，请尝试：<span class="string">&#x27;minikube kubectl -- get pods -A&#x27;</span></span><br><span class="line">* 完成！kubectl 现在已配置，默认使用<span class="string">&quot;minikube&quot;</span>集群和<span class="string">&quot;default&quot;</span>命名空间</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ minikube kubectl -- get pods -A</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                               READY   STATUS             RESTARTS      AGE</span><br><span class="line">kube-system   coredns-7d89d9b6b8-vwcrc           0/1     CrashLoopBackOff   3 (35s ago)   95s</span><br><span class="line">kube-system   etcd-minikube                      1/1     Running            0             107s</span><br><span class="line">kube-system   kube-apiserver-minikube            1/1     Running            0             107s</span><br><span class="line">kube-system   kube-controller-manager-minikube   1/1     Running            0             107s</span><br><span class="line">kube-system   kube-proxy-ws9cw                   1/1     Running            0             95s</span><br><span class="line">kube-system   kube-scheduler-minikube            1/1     Running            0             107s</span><br><span class="line">kube-system   storage-provisioner                1/1     Running            1 (73s ago)   106s</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Dashboard</span></span><br><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动失败：一直卡在 <code>正在验证 proxy 运行状况 ...</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用Dashboard（默认是disabled的）</span></span><br><span class="line"><span class="comment"># Dashboard是kubernetes addon,Addons是利用kubernetes的资源（DaemonSet, Deployment等）实现的，在整个集群层面的上功能(cluster feature)</span></span><br><span class="line">minikube addons list</span><br><span class="line"><span class="comment"># 启用Dashboard</span></span><br><span class="line">minikube addons <span class="built_in">enable</span> dashboard</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看更详细的报错信息</span><br><span class="line">minikube dashboard --alsologtostderr -v=1</span><br><span class="line"># 发现启动一直报 503 错误，然后不断地重试</span><br><span class="line"># 执行以下命令查看所有pod，发现 kubernetes-dashboard 一直没启动成功，在不断地重试</span><br><span class="line">minikube kubectl -- get pods -A</span><br><span class="line"># 执行如下命令查看该 Pod 的 log</span><br><span class="line">kubectl logs --namespace=kubernetes-dashboard kubernetes-dashboard-744fc84fb7-bxkmq</span><br><span class="line"># Error from server (BadRequest): container &quot;kubernetes-dashboard&quot; in pod &quot;kubernetes-dashboard-744fc84fb7-bxkmq&quot; is waiting to start: trying and failing to pull image</span><br><span class="line">kubectl describe pod kubernetes-dashboard-744fc84fb7-bxkmq --namespace kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<ul>
<li>拉取metrics-scraper镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动pull</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes-sigs/dashboard-metrics-scraper查看最新版本</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-scraper:v1.0.8</span><br><span class="line"></span><br><span class="line"><span class="comment">#打上tag</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-scraper:v1.0.8 docker.io/kubernetesui/metrics-scraper:v1.0.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像导入minikube</span></span><br><span class="line">minikube image load kubernetesui/metrics-scraper:v1.0.</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新生成pod</span></span><br><span class="line"><span class="comment"># kubectl delete pod -n &lt;podNameSpace&gt; &lt;podName&gt;</span></span><br><span class="line">kubectl delete pod -n kubernetes-dashboard dashboard-metrics-scraper-687748788c-bczzs</span><br></pre></td></tr></table></figure>

<ul>
<li>拉取dashboard镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#手动pull</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/dashboard:v2.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#打上tag</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/dashboard:v2.7.0 kubernetesui/dashboard:v2.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像导入minikube</span></span><br><span class="line">minikube image load kubernetesui/dashboard:v2.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新生成pod</span></span><br><span class="line">kubectl delete pod -n kubernetes-dashboard dkubernetes-dashboard-744fc84fb7-bxkmq</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不知道怎么查看镜像最新版本，后面再补充，可能要登录阿里云控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search registry.cn-hangzhou.aliyuncs.com/google_containers/&lt;镜像名&gt;</span><br></pre></td></tr></table></figure>

<p>这种方式报错：Error response from daemon: Unexpected status code 404</p>
</blockquote>
<p>再次检查pod状态：<code>minikube kubectl -- get pods -A</code>，发现pod正常了</p>
<p>使用 <code>minikube dashboard</code>启动，<a href="http://127.0.0.1:42975/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/">http://127.0.0.1:42975/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</a></p>
</blockquote>
<blockquote>
<p>补充：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 /etc/containerd/config.toml文件</span></span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用的是官方源，很慢，需要换成国内源</span></span><br><span class="line"><span class="comment"># 修改配置文件：/etc/containerd/config.toml</span></span><br><span class="line"><span class="comment"># 在[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]下边添加如下内容：</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">  endpoint = [<span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>, <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>, <span class="string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span>]</span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;k8s.gcr.io&quot;</span>]</span><br><span class="line">  endpoint = [<span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers&quot;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启containerd</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>重新启动后发现 <code>dashboard-metrics-scraper</code> 又拉取不了镜像了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 发现有两个一样的镜像</span></span><br><span class="line"><span class="comment"># kubernetesui/metrics-scraper                                          v1.0.9    ac9017206ce5   16 months ago   43.8MB</span></span><br><span class="line"><span class="comment"># registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-scraper   v1.0.9    ac9017206ce5   16 months ago   43.8MB</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除镜像 image id 前3位就行</span></span><br><span class="line">docker rmi ac9</span><br><span class="line"><span class="comment"># 报错：Error response from daemon: conflict: unable to delete ac9017206ce5 (must be forced) - image is referenced in multiple repositories</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除多余的标签：如果镜像被多个标签引用，可以逐个删除这些标签来解决问题</span></span><br><span class="line"><span class="comment"># docker rmi -f repository/image:tag</span></span><br><span class="line">docker rmi -f kubernetesui/metrics-scraper:v1.0.9</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>minikube kubectl – get pods -A查看pod 发现 coredns CrashLoopBackOff 问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ minikube kubectl -- get pods -A</span><br><span class="line">NAMESPACE             NAME          READY    STATUS         RESTARTS   AGE</span><br><span class="line">kube-system coredns-7d89d9b6b8-vwcrc 0/1 CrashLoopBackOff 50 (25s ago) 18h</span><br></pre></td></tr></table></figure>

<p>查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ kubectl logs -f coredns-7d89d9b6b8-vwcrc -n kube-system</span><br><span class="line"> [FATAL] plugin/loop: Loop (127.0.0.1:39174 -&gt; :53) detected <span class="keyword">for</span> zone <span class="string">&quot;.&quot;</span>, see https://coredns.io/plugins/loop#troubleshooting. Query: <span class="string">&quot;HINFO 1252716524163381999.4934294265190733081.&quot;</span></span><br><span class="line"> </span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ kubectl describe pod coredns-7d89d9b6b8-vwcrc -n kube-system</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason   Age                     From     Message</span><br><span class="line">  ----     ------   ----                    ----     -------</span><br><span class="line">  Normal   Pulled   15h (x37 over 18h)      kubelet  Container image <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4&quot;</span> already present on machine</span><br><span class="line">  Warning  BackOff  2m52s (x1078 over 18h)  kubelet  Back-off restarting failed container</span><br></pre></td></tr></table></figure>

<p>发现出现了Loop…detected…，这意味着<code>loop</code>检测插件已检测到上游 DNS 服务器之一中的无限转发循环</p>
<p>当 Kubernetes 中部署的 CoreDNS Pod 检测到循环时，CoreDNS Pod 将开始“CrashLoopBackOff”。 这是因为每次 CoreDNS 检测到循环并退出时，Kubernetes 都会尝试重新启动 Pod</p>
<p>转发循环通常由以下原因引起：</p>
<ul>
<li>最常见的是，CoreDNS 将请求直接转发给自身。例如，通过环回地址，例如127.0.0.1，::1或127.0.0.53</li>
<li>较不常见的是，CoreDNS转发到上游服务器，而上游服务器又将请求转发回CoreDNS。</li>
</ul>
<p>解决办法：</p>
<p>替换<code>forward . /etc/resolv.conf</code>为您上游 DNS 的 IP 地址，例如<code>forward . 8.8.8.8.</code> 但这只是解决了 CoreDNS 的问题，kubelet 会继续将无效的转发resolv.conf到所有defaultdnsPolicy Pod，让它们无法解析 DNS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改系统/etc/resolv.conf文件</span></span><br><span class="line">$ vim /etc/resolv.conf</span><br><span class="line"><span class="comment"># 在文件后添加</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br><span class="line"></span><br><span class="line">$ kubectl edit -n kube-system cm coredns</span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  Corefile: |</span><br><span class="line">    .:53 &#123;</span><br><span class="line">        <span class="built_in">log</span></span><br><span class="line">        errors</span><br><span class="line">        health &#123;</span><br><span class="line">           lameduck 5s</span><br><span class="line">        &#125;</span><br><span class="line">        ready</span><br><span class="line">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span><br><span class="line">           pods insecure</span><br><span class="line">           fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">           ttl 30</span><br><span class="line">        &#125;</span><br><span class="line">        prometheus :9153</span><br><span class="line">        hosts &#123;</span><br><span class="line">           192.168.49.1 host.minikube.internal</span><br><span class="line">           fallthrough</span><br><span class="line">        &#125;</span><br><span class="line">        forward . /etc/resolv.conf &#123;</span><br><span class="line">           max_concurrent 1000</span><br><span class="line">        &#125;</span><br><span class="line">        cache 30</span><br><span class="line">        <span class="comment">#loop  // 注释这里</span></span><br><span class="line">        reload</span><br><span class="line">        loadbalance</span><br><span class="line">    &#125;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2024-07-31T07:10:41Z&quot;</span></span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">&quot;22986&quot;</span></span><br><span class="line">  uid: 80c66b34-4e84-4f9c-b020-a87be7c5d3df</span><br></pre></td></tr></table></figure>

<p>将coredns的pod重新删除后就恢复正常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl delete -n kube-system pod &lt;podName&gt;</span><br><span class="line"><span class="comment"># 验证，发现状态正常了</span></span><br><span class="line">$ minikube kubectl -- get pods -A</span><br></pre></td></tr></table></figure>
</blockquote>
<p>为Dashboard分配一个固定端口	</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># address为虚拟机ip， ip a指令查看ensXXX的inet</span><br><span class="line">kubectl proxy --address=&#x27;192.168.64.128&#x27; --accept-hosts=&#x27;^*$&#x27; --port=8001</span><br></pre></td></tr></table></figure>

<blockquote>
<p>端口占用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172-12-0-1 ~]# kubectl proxy --address=<span class="string">&#x27;0.0.0.0&#x27;</span>  --accept-hosts=<span class="string">&#x27;^*$&#x27;</span> --port=8001</span><br><span class="line">error: listen tcp 0.0.0.0:8001: <span class="built_in">bind</span>: address already <span class="keyword">in</span> use</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装net-tools工具（netstat命令未找到的时候需要安装）</span></span><br><span class="line">yum install -y net-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># netstat -tulpn [| grep 8001]</span></span><br><span class="line">netstat -tulpn | grep 8001</span><br><span class="line"></span><br><span class="line">tcp6  0  0 	:::8001  	:::*  	LISTEN  	62614/kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放端口占用</span></span><br><span class="line"><span class="built_in">kill</span> -9 62614</span><br></pre></td></tr></table></figure>
</blockquote>
<p>访问<a href="http://192.168.64.128:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/%E6%8A%A5%E9%94%99">http://192.168.64.128:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/报错</a> <code>dial tcp 192.168.64.128:6443: connect: connection refused</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172-12-0-1 ~]# kubectl proxy --address=<span class="string">&#x27;192.168.64.128&#x27;</span>  --accept-hosts=<span class="string">&#x27;^*$&#x27;</span> --port=8001</span><br><span class="line">Starting to serve on 192.168.64.128:8001</span><br><span class="line">E0801 10:55:04.678103  104769 proxy_server.go:147] Error <span class="keyword">while</span> proxying request: dial tcp 192.168.64.128:6443: connect: connection refused</span><br></pre></td></tr></table></figure>

<p>通常表示 <code>kubectl proxy</code> 无法连接到 Kubernetes API Server，可以从以下方面排查：</p>
<ul>
<li><p>Kubernetes API Server 未启动或不可访问</p>
<p>确保 Kubernetes 的 API Server 在 Minikube 中正常运行，如果状态为 <code>Running</code>，则 API Server 应该在运行中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ minikube status</span><br><span class="line">minikube</span><br><span class="line"><span class="built_in">type</span>: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络配置问题</p>
<p>确保你的网络配置允许 <code>kubectl proxy</code> 访问 Minikube 的 API Server。有时可能需要调整防火墙或者网络策略以允许从你的机器（192.168.64.128）到 Minikube 虚拟机的6443端口的连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确保防火墙打开</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前的防火墙规则</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许访问6443端口</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --zone=public --add-port=6443/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载防火墙设置</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证端口访问</span></span><br><span class="line">telnet 192.168.64.128 6443</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">nc -zv 192.168.64.128 6443</span><br></pre></td></tr></table></figure>
</li>
<li><p>kubectl 配置</p>
<p>确保 kubectl 配置正确指向 Minikube</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config current-context</span><br></pre></td></tr></table></figure></li>
</ul>
<p>到这里应该可以正常启动dashboard了，浏览器访问：<a href="http://192.168.64.128:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/">http://192.168.64.128:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</a></p>
<hr>
<h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><h4 id="nginx部署"><a href="#nginx部署" class="headerlink" title="nginx部署"></a>nginx部署</h4><p>使用 <code>kubectl create</code> 命令创建管理 Pod 的 Deployment。该 Pod 根据提供的 Docker 镜像运行 Container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要先拉取nginx镜像</span></span><br><span class="line">$ docker pull nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行一个名称为 hello-nginx 的 pod 作为 nginx 镜像的 Deployment</span></span><br><span class="line">$ kubectl create deployment hello-nginx --image=nginx:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Deployment</span></span><br><span class="line">kubectl get deployments</span><br><span class="line"><span class="comment"># 删除 Deployment</span></span><br><span class="line"><span class="comment"># kubectl delete -n default deployment hello-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Pod</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment"># 删除 Pod</span></span><br><span class="line"><span class="comment"># kubectl delete -n default pod hello-nginx-557d767db6-zgtjf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群事件</span></span><br><span class="line">kubectl get events</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 kubectl 配置</span></span><br><span class="line">kubectl config view</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Typora使用教程</title>
    <url>/2024/07/24/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="一、Typora安装"><a href="#一、Typora安装" class="headerlink" title="一、Typora安装"></a>一、Typora安装</h2><h4 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h4><p>Typora中文官网：<a href="https://typoraio.cn/">https://typoraio.cn/</a><br>Typora官网：<a href="https://typora.io/releases/all">https://typora.io/releases/all</a></p>
<p><strong>2、激活</strong></p>
<ol>
<li>用编辑器打开<code>D:\Program Files\Typora\resources\page-dist\static\js\LicenseIndex.180dd4c7.4da8909c.chunk.js</code>，将 <code>e.hasActivated=&quot;true&quot;==e.hasActivated</code>  替换为 <code>e.hasActivated=&quot;true&quot;==&quot;true&quot;</code></li>
<li>关闭软件每次启动时的已激活弹窗，用编辑器打开<code>D:\Program Files\Typora\resources\page-dist\license.html</code>，将  <code>&lt;/body&gt;&lt;/html&gt;</code> 替换为 <code>&lt;/body&gt;&lt;script&gt;window.οnlοad=function()&#123;setTimeout(()=&gt;&#123;window.close();&#125;,5);&#125;&lt;/script&gt;&lt;/html&gt;</code></li>
<li>去除左下角软件未激活提示，用编辑器打开<code>D:\Program Files\Typora\resources\locales\zh-Hans.lproj\Panel.json</code>，将 <code>&quot;UNREGISTERED&quot;:&quot;未激活&quot;</code> 替换为 <code>&quot;UNREGISTERED&quot;:&quot; &quot;</code>，激活成功。</li>
</ol>
<h2 id="二、常用快捷键"><a href="#二、常用快捷键" class="headerlink" title="二、常用快捷键"></a>二、常用快捷键</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>ctrl + /</code></td>
<td align="left">切换 源代码模式&#x2F;预览模式</td>
</tr>
<tr>
<td align="left"><code>ctrl + 1 ~6</code></td>
<td align="left">一 ~ 六级标题，最多六级标题</td>
</tr>
<tr>
<td align="left"><code>ctrl + B</code></td>
<td align="left">粗体</td>
</tr>
<tr>
<td align="left"><code>ctrl + i 斜体</code></td>
<td align="left">斜体</td>
</tr>
<tr>
<td align="left"><code>ctrl + T</code></td>
<td align="left">表格</td>
</tr>
<tr>
<td align="left">&#96;&#96;&#96;&#96; + Enter<code>或</code>Ctrl + Shift + k&#96;</td>
<td align="left">代码块</td>
</tr>
<tr>
<td align="left"><code>&gt; + 空格</code></td>
<td align="left">引用</td>
</tr>
<tr>
<td align="left"><code>\ + 字符</code></td>
<td align="left">转义</td>
</tr>
<tr>
<td align="left"><code>Ctrl + u</code></td>
<td align="left">下划线</td>
</tr>
<tr>
<td align="left"><code>alt + shift + 5</code> 或 <code>~~内容~~</code></td>
<td align="left">删除线</td>
</tr>
<tr>
<td align="left"><code>--- + Enter</code>  或 <code>*** + Enter</code></td>
<td align="left">分割线</td>
</tr>
<tr>
<td align="left"><code>- + 空格</code> 或 <code>* + 空格</code> 或 <code>Ctrl + Shift + ]</code></td>
<td align="left">无序列表</td>
</tr>
<tr>
<td align="left"><code>数字 + . + 空格</code> 或 <code>Ctrl + Shift + [</code></td>
<td align="left">有序列表</td>
</tr>
<tr>
<td align="left"><code>[TOC] + Enter</code></td>
<td align="left">生成目录</td>
</tr>
<tr>
<td align="left"><code>Ctrl + L</code></td>
<td align="left">选中一整行</td>
</tr>
<tr>
<td align="left"><code>Ctrl + d</code></td>
<td align="left">选中单词</td>
</tr>
<tr>
<td align="left"><code>Ctrl + e</code></td>
<td align="left">选中相同格式的文字(例如：加粗、斜体)</td>
</tr>
<tr>
<td align="left"><code>Ctrl + home</code></td>
<td align="left">跳转到文章开头</td>
</tr>
<tr>
<td align="left"><code>Ctrl + end</code></td>
<td align="left">跳转到文章结尾</td>
</tr>
<tr>
<td align="left"><code>Ctrl + f</code></td>
<td align="left">搜索</td>
</tr>
<tr>
<td align="left"><code>Ctrl + h</code></td>
<td align="left">替换</td>
</tr>
<tr>
<td align="left"><code>Ctrl + k</code></td>
<td align="left">插入链接</td>
</tr>
<tr>
<td align="left"><code>$$ + Enter</code></td>
<td align="left">数学公式</td>
</tr>
<tr>
<td align="left"><code>: + 单词 + :</code></td>
<td align="left">表情（<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">常用表情</a>）:coffee:</td>
</tr>
<tr>
<td align="left"><code>直接拖动到指定位置</code> 或 <code>Ctrl + Shift + i</code></td>
<td align="left">插入图片（图片可以直接拖进来，但是图片是相对路径，只能在本地使用，如果要放到博客中，要用绝对路径）</td>
</tr>
<tr>
<td align="left"><code>&lt;sub&gt;内容&lt;/sub&gt;</code></td>
<td align="left"><sub>下标</sub></td>
</tr>
<tr>
<td align="left"><code>&lt;sup&gt;内容&lt;/sup&gt;</code></td>
<td align="left"><sup>上标</sup></td>
</tr>
<tr>
<td align="left"><code> [+^+脚注]</code></td>
<td align="left">[^脚注] （<strong>最前面有个空格</strong>）</td>
</tr>
<tr>
<td align="left"><code>==内容==</code></td>
<td align="left">&#x3D;&#x3D;高亮&#x3D;&#x3D;</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Shift + </code> &#96;</td>
<td align="left">着重</td>
</tr>
<tr>
<td align="left"><del><code>+ 内容 +</code></del></td>
<td align="left"><del>淡化</del></td>
</tr>
<tr>
<td align="left"><code>Ctrl + \</code></td>
<td align="left">清除格式</td>
</tr>
<tr>
<td align="left"><code>&lt;center&gt;+居中内容+&lt;center&gt;</code></td>
<td align="left">居中</td>
</tr>
<tr>
<td align="left"><code>&lt;p align=&quot;right&quot;&gt;右对齐&lt;/p&gt;</code></td>
<td align="left">右对齐</td>
</tr>
<tr>
<td align="left"><code>&lt;p align=&quot;left&quot;&gt;左对齐&lt;/p&gt;</code></td>
<td align="left">左对齐</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">操作相关</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Ctrl + N</code></td>
<td align="left">新建</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Shift + N</code></td>
<td align="left">新建窗口</td>
</tr>
<tr>
<td align="left"><code>Ctrl + O</code></td>
<td align="left">打开</td>
</tr>
<tr>
<td align="left"><code>Ctrl + P</code></td>
<td align="left">快速打开</td>
</tr>
<tr>
<td align="left"><code>Ctrl + S</code></td>
<td align="left">保存</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Shift + S</code></td>
<td align="left">另存为</td>
</tr>
<tr>
<td align="left"><code>Ctrl + W</code></td>
<td align="left">关闭</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Z</code></td>
<td align="left">撤销</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Y</code></td>
<td align="left">重做</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+C</code></td>
<td align="left">复制为<code>MarkDown</code></td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+V</code></td>
<td align="left">粘贴为纯文本</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+1</code></td>
<td align="left">大纲视图</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+2</code></td>
<td align="left">文档列表视图</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+3</code></td>
<td align="left">文件树视图</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+L</code></td>
<td align="left">显示隐藏侧边栏</td>
</tr>
<tr>
<td align="left"><code>F8</code></td>
<td align="left">专注模式</td>
</tr>
<tr>
<td align="left"><code>F9</code></td>
<td align="left">打字机模式</td>
</tr>
<tr>
<td align="left"><code>F11</code></td>
<td align="left">切换全屏</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+0</code></td>
<td align="left">实际大小</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Shift+ +/-</code></td>
<td align="left">放大&#x2F;缩小</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Tab</code></td>
<td align="left">应用内窗口切换</td>
</tr>
<tr>
<td align="left"><code>Shift+F12</code></td>
<td align="left">打开<code>DevTools</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h2 id="三、-生成pdf、html等文件"><a href="#三、-生成pdf、html等文件" class="headerlink" title="三、 生成pdf、html等文件"></a>三、 生成pdf、html等文件</h2><p>文件→导出→选择要导出文件的格式</p>
<h2 id="四、画图"><a href="#四、画图" class="headerlink" title="四、画图"></a>四、画图</h2><p><a href="https://blog.csdn.net/whatday/article/details/88655461">markdown 画图_markdown graph subgraph-CSDN博客</a></p>
<ol>
<li><p>graph 流程图</p>
<ul>
<li><code>TB</code>：从上到下</li>
<li><code>TD</code>：从上到下</li>
<li><code>BT</code>：从下到上</li>
<li><code>RL</code>：从右到左</li>
<li><code>LR</code>：从左到右</li>
</ul>
<p><strong>节点形状</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认节点 A</span><br><span class="line">文本节点 B[bname]</span><br><span class="line">圆角节点 C(cname)</span><br><span class="line">圆形节点 D((dname))</span><br><span class="line">非对称节点 E&gt;ename]</span><br><span class="line">菱形节点 F&#123;fname&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> A~F 是当前节点名字，类似于变量名，画图时便于引用</p>
</blockquote>
<blockquote>
<p> [b~f]name是节点中显示的文字，默认节点的名字和显示的文字都为A</p>
</blockquote>
   <pre class="mermaid">      graph LR;
       A-->B[文本]
       B[文本]-->C(圆角)
       C(圆角)-->D((圆形))
       D((圆形))-->E>非对称节点]
       E>非对称节点]-->F{菱形}
       F{菱形}-->A</pre>

<p><strong>连线</strong></p>
<p>节点间的连接线有多种形状，可以在连接线中加入标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">箭头连接 A1–-&gt;B1</span><br><span class="line">开放连接 A2—B2</span><br><span class="line">标签连接 A3–text—B3</span><br><span class="line">箭头标签连接 A4–text–&gt;B4</span><br><span class="line">虚线开放连接 A5.-B5</span><br><span class="line">虚线箭头连接 A6-.-&gt;B6</span><br><span class="line">标签虚线连接 A7-.text.-B7</span><br><span class="line">标签虚线箭头连接 A8-.text.-&gt;B8</span><br><span class="line">粗线开放连接 A9===B9</span><br><span class="line">粗线箭头连接 A10==&gt;B10</span><br><span class="line">标签粗线开放连接 A11==text===B11</span><br><span class="line">标签粗线箭头连接 A12==text==&gt;B12</span><br></pre></td></tr></table></figure>

<pre class="mermaid">   graph TB
  A1-->B1
  A2---B2
  A3--text---B3
  A4--text-->B4
  A5-.-B5
  A6-.->B6
  A7-.text.-B7
  A8-.text.->B8
  A9===B9
  A10==>B10
  A11==text===B11
  A12==text==>B12</pre>

<p>例子：</p>
<pre class="mermaid">   
graph LR
  start("input x") --> handler("x > 0?")
  handler --yes--> yes("output x")
  handler --no--> start
  yes --> exit("exit")</pre>



</li>
<li><p>flow 流程图</p>
<p><strong>关键字</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start/end，表示程序的开始与结束</span><br><span class="line">operation，表示程序的处理块</span><br><span class="line">subroutine，表示子程序块</span><br><span class="line">condition，表示程序的条件判断</span><br><span class="line">inputoutput，表示程序的出入输出</span><br><span class="line">right/left，表示当前连线在当前模块上的起点(默认从下端开始)</span><br><span class="line">yes/no， 表示condition判断的分支(可以和right，left同时使用)</span><br></pre></td></tr></table></figure>

<p>通过定义模块与连接，再结合以上关键词即可定义简单流程图的各个模块。</p>
<p>模块定义(模块标识与模块名称可以任意定义名称，但是不能为关键词)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块标识(相当于变量名)=&gt;模块关键词: 模块名称(模块中显示的文字)</span><br></pre></td></tr></table></figure>

<p>连接定义如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块标识1-&gt;模块标识2</span><br><span class="line">模块标识1-&gt;模块标识2-&gt;模块标识3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>进行连接的时候，可以通过<code>right</code>，<code>left</code>确定箭头的起点。</p>
<p>使用<code>condition</code>关键词定义的判断框的连接需要结合yes或者no使用，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cond1=&gt;condition: x&gt;0?</span><br><span class="line">cond1(yes)-&gt;module1</span><br><span class="line">cond1(no)-&gt;moudle2</span><br><span class="line"> </span><br><span class="line"># 指定方向,如果后面占用了这个方向, 前面的无效   </span><br><span class="line">cond1(yes,right)-&gt;module1</span><br><span class="line">cond1(no)-&gt;moudle2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 先自定义变量,然后画图</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 输入x</span><br><span class="line">sub=&gt;subroutine: 是否重新输入</span><br><span class="line">cond1=&gt;condition: x&gt;0?</span><br><span class="line">cond2=&gt;condition: yes/no </span><br><span class="line">io=&gt;inputoutput: 输出x  </span><br><span class="line"> </span><br><span class="line">st(right)-&gt;op-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;io(right)-&gt;e</span><br><span class="line">cond1(no)-&gt;sub(right)-&gt;cond2()</span><br><span class="line">cond2(yes, right)-&gt;op</span><br><span class="line">cond2(no)-&gt;e</span><br></pre></td></tr></table></figure>

<div id="flowchart-0" class="flow-chart"></div>


</li>
<li></li>
</ol>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">   st=>start: 开始
   e=>end: 结束
   op=>operation: 输入x
   sub=>subroutine: 是否重新输入
   cond1=>condition: x>0?
   cond2=>condition: yes/no 
   io=>inputoutput: 输出x  
    
   st(right)->op->cond1
   cond1(yes)->io(right)->e
   cond1(no)->sub(right)->cond2()
   cond2(yes, right)->op
   cond2(no)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
  </entry>
  <entry>
    <title>Vim使用教程</title>
    <url>/2024/07/29/Vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC] </p>
<h2 id="Vim使用教程"><a href="#Vim使用教程" class="headerlink" title="Vim使用教程"></a>Vim使用教程</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><p>一款高度可配置的文本编辑器。</p>
<h3 id="Vim模式"><a href="#Vim模式" class="headerlink" title="Vim模式"></a><strong>Vim模式</strong></h3><h4 id="1、常规模式"><a href="#1、常规模式" class="headerlink" title="1、常规模式"></a><strong>1、常规模式</strong></h4><p>启动编辑器时默认就处于此模式，以下是一些可以在常规模式下使用到的基本命令：</p>
<ul>
<li><strong>移动</strong>：<ul>
<li>方向键</li>
<li><code>h</code> ：左</li>
<li><code>l</code>  ：右</li>
<li><code>j</code>  ：下</li>
<li><code>k</code> ：上</li>
</ul>
</li>
<li><strong>插入：</strong><ul>
<li><code>i</code> ：在光标处插入文本</li>
<li><code>a</code> ：在光标后插入文本</li>
<li><code>A</code> ：在行尾开始插入文本</li>
<li><code>I</code> ： 在行首插入文本</li>
<li><code>o</code> ：在当前行后插入一个新行</li>
<li><code>O</code> ：在当前行前插入一个新行</li>
</ul>
</li>
<li><strong>删除：</strong><ul>
<li><code>x</code> ：删除光标处的文本</li>
<li><code>X</code> ：删除光标前的一个文本，相当于<code>BackSpace</code>键</li>
</ul>
</li>
<li><strong>修改：</strong><ul>
<li><code>r</code> ：替换光标处文本</li>
<li><code>R</code> ：使用寄存器替换光标处文本，可以修改光标后的文本，相当于<code>Insert</code>键</li>
</ul>
</li>
<li><strong>复制和粘贴：</strong><ul>
<li><code>yy</code> ：将文本剪切到剪贴板</li>
<li><code>Y</code>：将一行文本剪切到剪贴板</li>
<li><code>p</code> ：在当前行前粘贴剪贴板的文本</li>
<li><code>P</code>：在当前行后粘贴剪贴板的文本</li>
</ul>
</li>
<li><strong>其他：</strong><ul>
<li>. ：重复上一个命令</li>
<li>$ ：移至行尾</li>
<li>^ ：移至行首</li>
</ul>
</li>
<li></li>
<li></li>
</ul>
<h4 id="2、可视模式"><a href="#2、可视模式" class="headerlink" title="2、可视模式"></a>2、<strong>可视模式</strong></h4><p>按<code>v</code>键进入可视模式，以下是在可视模式中可以使用的一些基本命令：</p>
<ul>
<li><strong>选择：</strong><ul>
<li>方向键</li>
<li><code>h</code>：左</li>
<li><code>l</code>：右</li>
<li><code>j</code>：下</li>
<li><code>k</code>：上</li>
<li><code>V</code>：选择行</li>
<li><code>v</code>：选择字符</li>
</ul>
</li>
<li><strong>删除：</strong><ul>
<li><code>x</code> ：删除选定的文本</li>
<li><code>X</code> ：删除光标所在行</li>
</ul>
</li>
<li><strong>复制和粘贴：</strong><ul>
<li><code>y</code> ：复制选定的文本</li>
<li><code>Y</code> ：复制一整行文本</li>
<li><code>p</code> ：在当前行之前粘贴剪贴板中的文本</li>
<li><code>P</code> ：在当前行之后粘贴剪贴板中的文本</li>
</ul>
</li>
<li>其他：<ul>
<li><code>.</code> ：重复上一个命令</li>
<li><code>G</code> ：移至文件末尾</li>
<li><code>gg</code> ：移至文件开头</li>
<li><code>^</code> ：移至行首</li>
<li><code>$</code> ：移至行尾</li>
<li><code>%</code> ：更改后重复上一个命令</li>
</ul>
</li>
</ul>
<h4 id="3、选择模式"><a href="#3、选择模式" class="headerlink" title="3、选择模式"></a><strong>3、选择模式</strong></h4><p>选择模式看起来像可视模式，在最后一行会显示<code>– 选择 –</code>。</p>
<p>进入选择模式：</p>
<ul>
<li>从可视化模式，按下 <code>CTRL + G</code>。</li>
</ul>
<p>以下是可以用于选择模式的一些基本命令：</p>
<ul>
<li>可打印字符、 和 会导致删除选定内容，Vim 进入插入模式。插入所键入字符。</li>
<li>不可打印的移动命令，同时按下 Shift 键，会扩展所选内容。“keymodel”必须包含“startsel”。</li>
<li>不可打印的移动命令，未按下 Shift 键，会停止选择模式。“keymodel”必须包含“stopsel”。</li>
<li><code>CTRL + O</code> 在一个命令的持续时间内切换至可视化模式</li>
<li><code>CTRL + G</code> 切换至可视模式。</li>
</ul>
<h4 id="4、插入模式"><a href="#4、插入模式" class="headerlink" title="4、插入模式"></a><strong>4、插入模式</strong></h4><p>按 <code>i</code> 键进入插入模式，在插入模式中可以<strong>添加</strong>新文本或<strong>修改</strong>文本。</p>
<p>以下是一些可以在插入模式下使用到的基本命令：</p>
<ul>
<li>插入：<ul>
<li><code>a</code> ：在光标后插入文本。</li>
<li><code>A</code> ：在行尾开始插入文本。</li>
<li><code>I</code> ：在行首插入文本。</li>
<li><code>o</code> ：在当前行后插入一个新行。</li>
<li><code>O</code> ：在当前行前插入一个新行。</li>
</ul>
</li>
<li>其他：<ul>
<li><code>Esc</code> ：退出插入模式并返回常规模式。</li>
</ul>
</li>
</ul>
<h4 id="5、命令模式"><a href="#5、命令模式" class="headerlink" title="5、命令模式"></a><strong>5、命令模式</strong></h4><p>按 <code>:</code> 键将进入命令模式，可以在其中输入 Vim 命令。</p>
<p>以下是在命令模式中可以使用的一些基本命令：</p>
<ul>
<li><code>:w</code> ：在不退出 Vim 的情况下写入或保存文件</li>
<li><code>:q</code> ：退出 Vim。如果有未保存的更改，系统会提示您放弃它们</li>
<li><code>:q!</code>：不保存任何更改而退出 Vim</li>
<li><code>:qa!</code> ： 退出所有窗口并放弃所有未保存的更改</li>
<li><code>:e filename</code> ：打开一个新文件进行编辑</li>
<li><code>:r filename</code> ：在光标位置读取或插入文件的内容</li>
<li><code>/pattern</code> ：在文件中搜索模式。按 <code>n</code> 移动到模式的下一个出现处，按 <code>N</code> 移动到上一个出现处</li>
<li><code>:set paste</code> ：进入粘贴模式，以防止从 Vim 外部粘贴文本时自动缩进</li>
<li><code>:set number</code> 或 <code>:set nu</code> ：在左页边距显示行号</li>
<li><code>:set spell</code> ：为当前文件启用拼写检查</li>
<li><code>:set nospell</code> ：禁用拼写检查</li>
<li><code>:s/old/new/g</code> ：将当前行中的所有<code>old</code>替换为<code>new</code>。使用计数，例如<code>:s/old/new/g 3</code>，以应用替换三次</li>
<li><code>:g/pattern/d</code> ：删除所有与模式匹配的行</li>
</ul>
<h4 id="6-Ex-模式"><a href="#6-Ex-模式" class="headerlink" title="6. Ex 模式"></a>6. <strong>Ex 模式</strong></h4><p>按<code>Q</code>键将进入 ex 模式，可以在 ex 模式中执行 Vim 命令，命令执行后不会离开命令模式，可以继续输入命令并执行。</p>
<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a><strong>导航</strong></h3><h4 id="在文件中移动"><a href="#在文件中移动" class="headerlink" title="在文件中移动"></a><strong>在文件中移动</strong></h4><ul>
<li><code>h</code> ：光标向左移动</li>
<li><code>l</code> ：光标向右移动</li>
<li><code>j</code> ：光标向下移动</li>
<li><code>k</code> ：光标向上移动</li>
<li><code>0</code>（零）：将光标移到行首</li>
<li><code>^</code> ：将光标移到该行的第一个非空白字符</li>
<li><code>$</code> ：将光标移到该行的末尾</li>
<li><code>g_</code> ：将光标移到该行的最后一个非空白字符</li>
<li><code>G</code>：将光标移到文件的最后一行</li>
<li><code>gg</code>：将光标移到文件的首行</li>
<li><code>Ctrl + D</code> ：向下滚动半屏</li>
<li><code>Ctrl + U</code> ：向上滚动半屏</li>
<li><code>Ctrl + F</code> ：向前移动整个屏幕</li>
<li><code>Ctrl + B</code> ：向后移动整个屏幕</li>
<li><code>H</code> ：将光标移到屏幕顶部</li>
<li><code>M</code> ：将光标移到屏幕中间</li>
<li><code>L</code> ：将光标移到屏幕底部</li>
</ul>
<h4 id="跳转到特定行或单词"><a href="#跳转到特定行或单词" class="headerlink" title="跳转到特定行或单词"></a><strong>跳转到特定行或单词</strong></h4><ul>
<li><code>10G</code> | <code>10gg</code> | <code>:10</code>：跳转到第 10 行</li>
<li><code>*</code>：搜索光标下的单词</li>
<li><code>#</code>：向后搜索光标下的单词</li>
</ul>
<h4 id="在搜索结果中移动"><a href="#在搜索结果中移动" class="headerlink" title="在搜索结果中移动"></a><strong>在搜索结果中移动</strong></h4><ul>
<li><code>/foo</code> : 查找<code>foo</code></li>
<li><code>n</code>：将光标移到下一个匹配项（向前）</li>
<li><code>N</code>：将光标移到上一个匹配项（向后）</li>
</ul>
<h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a><strong>文本编辑</strong></h3><h4 id="插入和追加文本"><a href="#插入和追加文本" class="headerlink" title="插入和追加文本"></a><strong>插入和追加文本</strong></h4><ul>
<li><code>i</code> ：在光标前插入文本</li>
<li><code>I </code>：在行的开头插入文本</li>
<li><code>a</code> ：在光标后追加文本</li>
<li><code>A</code> ：在行的末尾追加文本</li>
</ul>
<h4 id="编辑行"><a href="#编辑行" class="headerlink" title="编辑行"></a><strong>编辑行</strong></h4><ul>
<li><code>J</code> ：将当前行与下一行连接</li>
<li><code>cc</code> | <code>S</code> ：更改整行内容（删除并进入插入模式）</li>
<li><code>cw</code> ：更改光标下的单词（删除并进入插入模式）</li>
<li><code>C</code> ：从光标位置更改剩余行（删除并进入插入模式）</li>
<li><code>r</code> ：用另一个字符替换光标下的单个字符</li>
<li><code>R</code> ：输入替换模式；替换多个字符，直到按 <code>Esc</code></li>
<li><code>g~</code> ：反转光标下字符的大小写</li>
</ul>
<h4 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a><strong>删除文本</strong></h4><ul>
<li><code>x</code>：删除光标下的字符</li>
<li><code>X</code>：删除光标前的字符</li>
<li><code>dd</code>：删除整行</li>
<li><code>D</code>：从光标位置删除剩余行（剪切），光标所在字符也会被删除</li>
<li><code>cw</code>：更改光标下的单词（删除并进入插入模式）</li>
</ul>
<h4 id="复制和粘贴文本"><a href="#复制和粘贴文本" class="headerlink" title="复制和粘贴文本"></a><strong>复制和粘贴文本</strong></h4><ul>
<li><code>yy</code>：将整行内容剪切（复制）到默认寄存器</li>
<li><code>yw</code>：将光标下的单词剪切（复制）到默认寄存器</li>
<li><code>p</code>：在光标位置前粘贴默认寄存器的内容</li>
<li><code>P</code>：在光标位置后粘贴默认寄存器的内容</li>
</ul>
<h4 id="撤销和重做更改"><a href="#撤销和重做更改" class="headerlink" title="撤销和重做更改"></a><strong>撤销和重做更改</strong></h4><ul>
<li><code>u</code>：撤销对文件进行的最后一次更改</li>
<li><code>Ctrl + R</code> ：重做最后一次撤销的更改</li>
</ul>
<h3 id="搜索和替换文本"><a href="#搜索和替换文本" class="headerlink" title="搜索和替换文本"></a><strong>搜索和替换文本</strong></h3><h4 id="基本搜索命令"><a href="#基本搜索命令" class="headerlink" title="基本搜索命令"></a><strong>基本搜索命令</strong></h4><ul>
<li><code>/foo</code>：<strong>向后</strong>搜索单词 <code>foo</code></li>
<li><code>?bar</code>：<strong>向前</strong>搜索单词 <code>bar</code></li>
<li><code>n</code>：搜索后将光标移至下一个匹配项</li>
<li><code>N</code>：搜索后将光标移至上一个匹配项</li>
</ul>
<h4 id="高级搜索命令"><a href="#高级搜索命令" class="headerlink" title="高级搜索命令"></a><strong>高级搜索命令</strong></h4><ul>
<li><code>:%s/foo/bar/g</code>：在整个文件中查找并用 <code>bar</code> 替换所有出现的 <code>foo</code></li>
</ul>
<h3 id="缩进和格式化"><a href="#缩进和格式化" class="headerlink" title="缩进和格式化"></a><strong>缩进和格式化</strong></h3><h4 id="调整缩进"><a href="#调整缩进" class="headerlink" title="调整缩进"></a><strong>调整缩进</strong></h4><ul>
<li><code>&gt;&gt;</code>：将当前行或选定的行缩进一个制表符位（或移位宽度）</li>
<li><code>&lt;&lt;</code>：将当前行或选定的行向外缩进一个制表符位（或移位宽度）</li>
<li><code>==</code>：将当前行或选定的行缩进到正确的缩进级别</li>
</ul>
<h4 id="格式化段落和代码块"><a href="#格式化段落和代码块" class="headerlink" title="格式化段落和代码块"></a><strong>格式化段落和代码块</strong></h4><ul>
<li><code>gqip</code>：格式化当前段落（两行空格之间的文本）</li>
<li><code>=ap</code>：格式化选定的代码块</li>
<li><code>gwap</code>：将选定的代码块与其镜像交换（例如，翻转函数体）</li>
<li><code>gg=G</code>：格式化整个文件</li>
</ul>
<h3 id="代码折叠和切换"><a href="#代码折叠和切换" class="headerlink" title="代码折叠和切换"></a><strong>代码折叠和切换</strong></h3><h4 id="折叠和展开区域"><a href="#折叠和展开区域" class="headerlink" title="折叠和展开区域"></a><strong>折叠和展开区域</strong></h4><ul>
<li><code>zf</code>：可视模式选择行，将当前行或选定的行折叠到区域中</li>
<li><code>:10,20fold</code> ：折叠指定行范围的代码块</li>
<li><code>za</code>：切换当前行的折叠状态（如果折叠，则打开；如果未折叠，则关闭）</li>
<li><code>zM</code>：关闭当前缓冲区中的所有折叠</li>
<li><code>zR</code>：打开当前缓冲区中的所有折叠</li>
</ul>
<h4 id="设置折叠级别"><a href="#设置折叠级别" class="headerlink" title="设置折叠级别"></a><strong>设置折叠级别</strong></h4><ul>
<li><code>zm</code>：折叠级别减一（关闭折叠或打开更嵌套的折叠）</li>
<li><code>zr</code>：折叠级别加一（打开折叠或创建新折叠）</li>
</ul>
<h3 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a><strong>缓冲区管理</strong></h3><h4 id="列出和切换缓冲区"><a href="#列出和切换缓冲区" class="headerlink" title="列出和切换缓冲区"></a><strong>列出和切换缓冲区</strong></h4><ul>
<li><code>:ls</code>：列出当前 Vim 会话中的所有缓冲区</li>
<li><code>:b foo</code>：切换到名为 <code>foo</code> 的缓冲区</li>
<li><code>Ctrl+Shift+6</code> ：在最后使用过的两个缓冲区之间切换</li>
</ul>
<h4 id="分割和关闭窗口"><a href="#分割和关闭窗口" class="headerlink" title="分割和关闭窗口"></a><strong>分割和关闭窗口</strong></h4><ul>
<li><code>:split</code> 或 <code>:sp</code>：在当前选项卡页中打开一个包含相同文件的新窗口</li>
<li><code>:split path/to/another/file</code> ：在新窗口打开另一个文件</li>
<li><code>:vsplit</code> 或 <code>:vsp</code>：在当前选项卡页中打开一个包含相同文件的新垂直窗口</li>
<li><code>:vsplit path/to/another/file</code> ：在新窗口打开另一个文件</li>
<li><code>Ctrl + W</code> <code>Ctrl + W</code>：切换窗口</li>
<li><code>:q</code>：退出窗口</li>
</ul>
<h3 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a><strong>调整窗口大小</strong></h3><ul>
<li><code>Ctrl + W +</code>：将当前窗口的高度增加一行</li>
<li><code>Ctrl + W -</code>：将当前窗口的高度减少一行</li>
<li><code>Ctrl + W &gt;</code>：将当前窗口的宽度增加一列</li>
<li><code>Ctrl + W &lt;</code>：将当前窗口的宽度减少一列</li>
<li><code>Ctrl + W =</code>：将当前窗口水平等分</li>
<li><code>Ctrl + W |</code>：将当前窗口垂直等分</li>
</ul>
<h3 id="移动窗口"><a href="#移动窗口" class="headerlink" title="移动窗口"></a><strong>移动窗口</strong></h3><ul>
<li><code>Ctrl + W + h</code>：将当前窗口移到左边</li>
<li><code>Ctrl + W + j</code>：将当前窗口向下移动</li>
<li><code>Ctrl + W + k</code>：将当前窗口向上移动</li>
<li><code>Ctrl + W + l</code>：将当前窗口移到右边</li>
</ul>
<h3 id="窗口导航"><a href="#窗口导航" class="headerlink" title="窗口导航"></a><strong>窗口导航</strong></h3><ul>
<li><code>Ctrl + W + p</code>：将光标移至前一个窗口（左或上）</li>
<li><code>Ctrl + W + n</code>：将光标移至下一个窗口（右或下）</li>
</ul>
<h3 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a><strong>选项卡管理</strong></h3><h4 id="打开、关闭和列出选项卡"><a href="#打开、关闭和列出选项卡" class="headerlink" title="打开、关闭和列出选项卡"></a><strong>打开、关闭和列出选项卡</strong></h4><ul>
<li><code>:tabnew</code> 或 <code>:tabedit</code>：打开一个包含空缓冲区的选项卡</li>
<li><code>:tabedit foo.txt</code>：打开一个包含文件 <code>foo.txt</code>的新选项卡</li>
<li><code>:qa</code>：关闭当前 Vim 会话中的所有窗口和选项卡（或在退出前使用 <code>:wq</code> 保存更改）</li>
<li><code>:lt</code>：列出当前 Vim 会话中的所有选项卡</li>
</ul>
<h4 id="在选项卡之间移动"><a href="#在选项卡之间移动" class="headerlink" title="在选项卡之间移动"></a><strong>在选项卡之间移动</strong></h4><ul>
<li><code>Ctrl + W + T</code>：将当前窗口移至其自己的选项卡页</li>
<li><code>gT</code>：将光标移至前一个选项卡页（左或上）</li>
<li><code>gt</code>：将光标移至下一个选项卡页（右或下）</li>
</ul>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a><strong>文件操作</strong></h3><h4 id="打开和保存文件"><a href="#打开和保存文件" class="headerlink" title="打开和保存文件"></a><strong>打开和保存文件</strong></h4><ul>
<li><code>:edit foo.txt</code>：打开一个包含文件 <code>foo.txt</code> 的新缓冲区</li>
<li><code>:write</code> 或 <code>:w</code>：将当前缓冲区的内容保存到其关联的文件</li>
<li><code>:qa</code>：退出当前 Vim 会话中的所有窗口和选项卡（或在退出前使用 <code>:wq</code> 保存更改）</li>
</ul>
<h3 id="使用不同文件分割窗口"><a href="#使用不同文件分割窗口" class="headerlink" title="使用不同文件分割窗口"></a><strong>使用不同文件分割窗口</strong></h3><ul>
<li><code>:split foo.txt</code>：打开一个包含文件 <code>foo.txt</code>的新窗口</li>
<li><code>:vsplit bar.txt</code>：打开一个包含文件 <code>bar.txt</code> 的新垂直窗口</li>
</ul>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a><strong>插件安装</strong></h2><p>安装vim-plug插件管理器</p>
<p>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>

<p>这条命令会将 vim-plug 下载并安装到 <code>~/.vim/autoload/plug.vim</code> 中。</p>
<p>配置：在你的 <code>~/.vimrc</code>（或 <code>~/.config/nvim/init.vim</code> 如果是 <code>Neovim</code>）文件中添加以下内容来配置 vim-plug：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; vim-plug settings</span></span><br><span class="line"><span class="string">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span></span><br><span class="line"><span class="string">&quot;</span> 插件列表</span><br><span class="line"><span class="string">&quot; 例如：Plug &#x27;junegunn/vim-easy-align&#x27;</span></span><br><span class="line"><span class="string">call plug#end()</span></span><br></pre></td></tr></table></figure>

<p>在 <code>call plug#begin()</code> 和 <code>call plug#end()</code> 之间，列出你想安装的插件。每个插件由 <code>Plug &#39;github用户/仓库&#39;</code> 格式定义。</p>
<p>在Vim运行以下命令安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:PlugInstall</span><br></pre></td></tr></table></figure>

<p><strong>常用插件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nerdtree：一个在屏幕左侧添加文件树的插件，可以让你更轻松地浏览文件。</span><br><span class="line">Syntastic：一个为多种编程语言提供语法高亮的插件。</span><br><span class="line">Vim-Airline：一个高度可配置的 Vim 状态栏，易于自定义，可提高你的整体编辑效率。</span><br><span class="line">Nerd Commenter：这个插件可以帮助你轻松注释和取消注释各种编程语言中的代码行。</span><br><span class="line">FZF：一个命令行模糊查找器，具有语法高亮、键盘导航和文件过滤功能。</span><br><span class="line">YouCompleteMe：一个适用于 Vim 的快速按需代码补全引擎。</span><br><span class="line">Coc.nvim：一个语言服务器协议 (LSP) 插件，为许多热门编程语言提供 IntelliSense 功能，如自动完成和跳转到定义。</span><br><span class="line">Vim-Fugitive：这个插件允许你轻松地在 Vim 中管理 Git 存储库。</span><br><span class="line">Ale：一个与许多热门编程语言搭配使用的语法和样式检查器，可在键入时提供实时错误检查。</span><br><span class="line">Vim-surround：这个插件让你可以轻松处理文件中的文本周围成对的字符（如引号或括号）。</span><br><span class="line">Lightline：一个轻量级且可配置的 Vim 状态栏/选项卡栏插件。</span><br><span class="line">Vim-easymotion：EasyMotion 提供了一种更简单的方式来使用 vim 中的一些动作。它通过突出显示所有可能的选择并允许你按一个键直接跳转到目标来消除 w 或 f&#123;char&#125; 中的 。</span><br><span class="line">Vim-lsp：一个提供语言服务器协议支持的插件，让你可以使用高级语言特性，如代码补全和语法高亮。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="line">	Plug &#x27;preservim/nerdtree&#x27;</span><br><span class="line">	Plug &#x27;vim-syntastic/syntastic&#x27;</span><br><span class="line">	Plug &#x27;vim-airline/vim-airline&#x27;</span><br><span class="line">	Plug &#x27;preservim/nerdcommenter&#x27;</span><br><span class="line">	Plug &#x27;ycm-core/YouCompleteMe&#x27;</span><br><span class="line">	Plug &#x27;junegunn/vim-easy-align&#x27;</span><br><span class="line">	Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
