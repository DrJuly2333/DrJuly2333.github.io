<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux入门</title>
    <url>/2024/08/05/Linux%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>[TOC] </p>
<h3 id="1、tee和cat使用EOF往文件中添加内容"><a href="#1、tee和cat使用EOF往文件中添加内容" class="headerlink" title="1、tee和cat使用EOF往文件中添加内容"></a>1、<code>tee</code>和<code>cat</code>使用<code>EOF</code>往文件中添加内容</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><ul>
<li><p>覆盖：要写入的文件可以放在<strong>中间或最后</strong></p>
<ol>
<li><p>格式一</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /test/test.txt</span></span><br><span class="line"><span class="string">Hello World!</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>格式二</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt; /test/test.txt &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">Hello World!</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>追加：追加的写法基本和覆盖一样，不同的是单重定向号变成<code>双重定向号</code></p>
<ol>
<li><p>格式一</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt;&gt; /test/test.txt</span></span><br><span class="line"><span class="string">Hello World 1!</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>格式二</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &gt;&gt; /test/test.txt &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">Hello World 1!</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<blockquote>
<p>不论是覆盖还是追加，在涉及到变量操作时是需要进行转义的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt;&gt; /test/a.txt</span></span><br><span class="line"><span class="string">PATH=\$PATH:\$HOME/bin</span></span><br><span class="line"><span class="string">export ORACLE_BASE=/u01/app/oracle</span></span><br><span class="line"><span class="string">export ORACLE_HOME=\$ORACLE_BASE/10.2.0/db_1</span></span><br><span class="line"><span class="string">export ORACLE_SID=yqpt</span></span><br><span class="line"><span class="string">export PATH=\$PATH:\$ORACLE_HOME/bin</span></span><br><span class="line"><span class="string">export NLS_LANG=&quot;AMERICAN_AMERICA.AL32UTF8&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h4><p>语法:</p>
<blockquote>
<p><code>tee [-ai][--help][--version][文件...]</code></p>
</blockquote>
<p>参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a 或 --append 　				 附加到既有文件的后面，而非覆盖它．</span><br><span class="line">-i 或 --ignore-interrupts 　	 忽略中断信号。</span><br><span class="line">--<span class="built_in">help</span> 　				 	  在线帮助。</span><br><span class="line">--version 　				 	  显示版本信息。</span><br></pre></td></tr></table></figure>

<p>使用指令 <code>tee</code> 将用户输入的数据同时保存到文件 <code>file1</code> 和 <code>file2</code> 中，输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在两个文件中复制内容</span></span><br><span class="line">$ <span class="built_in">tee</span> file1 file2</span><br><span class="line"><span class="comment"># 输入需要保存到文件的数据</span></span><br><span class="line">Test <span class="built_in">tee</span> <span class="comment">#提示用户输入数据</span></span><br><span class="line">Test <span class="built_in">tee</span> <span class="comment">#输出数据，进行输出反馈</span></span><br><span class="line"><span class="comment"># Ctrl + C退出</span></span><br><span class="line"><span class="comment"># 验证是否写入成功</span></span><br><span class="line">$ <span class="built_in">cat</span> file1 file2</span><br></pre></td></tr></table></figure>

<h3 id="2、使用-cat-命令结合重定向可以在指定位置写入内容"><a href="#2、使用-cat-命令结合重定向可以在指定位置写入内容" class="headerlink" title="2、使用 cat 命令结合重定向可以在指定位置写入内容"></a>2、使用 <code>cat</code> 命令结合重定向可以在指定位置写入内容</h3><blockquote>
<p><strong>备份原文件</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> filename.txt filename_backup.txt</span><br></pre></td></tr></table></figure>

<ol>
<li><h4 id="使用-head-和-tail-命令结合重定向"><a href="#使用-head-和-tail-命令结合重定向" class="headerlink" title="使用 head 和 tail 命令结合重定向"></a><strong>使用 <code>head</code> 和 <code>tail</code> 命令结合重定向</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件的前5行输出到临时文件temp.txt中</span></span><br><span class="line">$ <span class="built_in">head</span> -n 5 filename.txt &gt; temp.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在temp.txt中添加要插入的内容</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;New content to insert&quot;</span> &gt;&gt; temp.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件剩余的内容（即第6行到文件末尾）追加到temp.txt中</span></span><br><span class="line">$ <span class="built_in">tail</span> -n +6 filename.txt &gt;&gt; temp.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将temp.txt内容覆盖到原始文件filename.txt</span></span><br><span class="line">$ <span class="built_in">mv</span> temp.txt filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 <code>sed</code> 命令</strong></p>
<p><code>sed</code> 命令可以用于流编辑，可以直接在指定的行后插入内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed <span class="string">&#x27;5a\</span></span><br><span class="line"><span class="string">New content to insert</span></span><br><span class="line"><span class="string">&#x27;</span> filename.txt &gt; temp.txt &amp;&amp; <span class="built_in">mv</span> temp.txt filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 <code>awk</code> 命令</strong></p>
<p><code>awk</code> 可以用于处理文本文件，可以通过它在指定行后插入内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk <span class="string">&#x27;NR==5 &#123;print &quot;New content to insert&quot;&#125; 1&#x27;</span> filename.txt &gt; temp.txt &amp;&amp; <span class="built_in">mv</span> temp.txt filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用 <code>ed</code> 命令</strong></p>
<p><code>ed</code> 是一个文本编辑器，可以在不打开文件的情况下直接编辑文件内容，适合于批处理脚本中的文件操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">$ ed --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 ed</span></span><br><span class="line">$ <span class="built_in">sudo</span> yum install ed     <span class="comment"># 如果使用的是 CentOS 7 或更早版本</span></span><br><span class="line">或</span><br><span class="line">$ <span class="built_in">sudo</span> dnf install ed     <span class="comment"># 如果使用的是 CentOS 8 或更新版本</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ed -s filename.txt &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">5a</span></span><br><span class="line"><span class="string">New content to insert</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">w</span></span><br><span class="line"><span class="string">q</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3、sed"><a href="#3、sed" class="headerlink" title="3、sed"></a>3、<code>sed</code></h3><p><code>sed</code>（Stream Editor）是一个非常强大的流式文本编辑工具，它主要用于对文本流进行编辑、转换和过滤。</p>
<p>以下是一些 <code>sed</code> 命令的常用操作和示例：</p>
<ol>
<li><h4 id="替换文本："><a href="#替换文本：" class="headerlink" title="替换文本："></a><strong>替换文本</strong>：</h4><p>使用 <code>s</code> 命令可以在文本中进行<strong>替换</strong>操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在文件中将所有的 &quot;old_text&quot; 替换为 &quot;new_text&quot;</span></span><br><span class="line"><span class="comment"># 不保存</span></span><br><span class="line">$ sed <span class="string">&#x27;s/old_text/new_text/g&#x27;</span> filename.txt</span><br><span class="line"><span class="comment"># 保存修改</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s/old_text/new_text/g&#x27;</span> filename.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 仅替换每行的第一个匹配</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s/old_text/new_text/&#x27;</span> filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="删除行："><a href="#删除行：" class="headerlink" title="删除行："></a><strong>删除行</strong>：</h4><p>使用 <code>d</code> 命令可以删除匹配的行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除包含特定文本的行</span></span><br><span class="line"><span class="comment"># sed &#x27;/pattern_to_delete/d&#x27; filename.txt</span></span><br><span class="line"><span class="comment"># 删除文件 `filename.txt` 中包含单词 &quot;example&quot; 的所有行</span></span><br><span class="line">$ sed -i <span class="string">&#x27;/example/d&#x27;</span> filename.txt</span><br><span class="line"><span class="comment"># 删除文件 `filename.txt` 中所有以 &quot;pattern&quot; 开头的行</span></span><br><span class="line">$ sed -i <span class="string">&#x27;/^pattern/d&#x27;</span> filename.txt</span><br><span class="line"><span class="comment"># 删除文件 `filename.txt` 中所有空白行（只包含空格或制表符的行）</span></span><br><span class="line">$ sed -i <span class="string">&#x27;/^\s*$/d&#x27;</span> filename.txt</span><br><span class="line"><span class="comment"># 删除文件 `filename.txt` 中所有以 &quot;start_with&quot; 开头的行</span></span><br><span class="line">$ sed -i <span class="string">&#x27;/^start_with/d&#x27;</span> filename.txt</span><br><span class="line"><span class="comment"># 删除文件 `filename.txt` 中包含任何数字的所有行：</span></span><br><span class="line">$ sed -i <span class="string">&#x27;/[0-9]/d&#x27;</span> filename.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除第 N 行</span></span><br><span class="line">$ sed -i <span class="string">&#x27;Nd&#x27;</span> filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="插入和追加行："><a href="#插入和追加行：" class="headerlink" title="插入和追加行："></a><strong>插入和追加行</strong>：</h4><p>使用 <code>i</code> 命令插入行，在指定行之前插入内容；</p>
<p>使用 <code>a</code> 命令追加行，在指定行之后追加内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在第 N 行前插入内容</span></span><br><span class="line">sed -i <span class="string">&#x27;Ni\</span></span><br><span class="line"><span class="string">This is the new line&#x27;</span> filename.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在第 N 行后追加内容</span></span><br><span class="line">sed -i <span class="string">&#x27;Na\</span></span><br><span class="line"><span class="string">This is the new line&#x27;</span> filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="打印行："><a href="#打印行：" class="headerlink" title="打印行："></a><strong>打印行</strong>：</h4><p>使用 <code>p</code> 命令可以打印匹配的行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印包含特定文本的行</span></span><br><span class="line">sed -n <span class="string">&#x27;/pattern_to_print/p&#x27;</span> filename.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印特定行号的内容</span></span><br><span class="line">sed -n <span class="string">&#x27;Np&#x27;</span> filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>选定行范围</strong>：</p>
<p>使用起始行号和结束行号，可以选定一个行范围进行操作。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印从第 N 行到第 M 行之间的内容</span></span><br><span class="line">sed -n <span class="string">&#x27;N,Mp&#x27;</span> filename.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除从第 N 行到第 M 行之间的内容</span></span><br><span class="line">sed <span class="string">&#x27;N,Md&#x27;</span> filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>保存修改</strong>：</p>
<p>默认情况下，<code>sed</code> 命令只是在屏幕上显示修改后的内容，并不会修改原始文件。</p>
<p>要将修改保存回原始文件，可以使用重定向操作符结合 <code>-i</code> 选项（原地修改）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将修改后的内容保存回原始文件</span></span><br><span class="line">sed -i <span class="string">&#x27;s/old_text/new_text/g&#x27;</span> filename.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>多个命令组合</strong>：</p>
<p>可以使用分号 <code>;</code> 将多个 <code>sed</code> 命令组合在一起，依次应用于每行文本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将同时执行多个操作：删除包含 &quot;pattern&quot; 的行，将 &quot;old_text&quot; 替换为 &quot;new_text&quot;，并在第 N 行前插入新内容</span></span><br><span class="line">sed <span class="string">&#x27;/pattern/d; s/old_text/new_text/g; Ni\</span></span><br><span class="line"><span class="string">New line to insert&#x27;</span> filename.txt</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这些是 <code>sed</code> 命令的一些常见用法示例，<code>sed</code> 的功能非常强大，可以通过组合不同的命令和选项来满足各种文本处理需求。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes实战</title>
    <url>/2024/07/30/MiniKube%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>[TOC] </p>
<h3 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h3><h4 id="1、卸载宝塔面板（可选）"><a href="#1、卸载宝塔面板（可选）" class="headerlink" title="1、卸载宝塔面板（可选）"></a>1、卸载宝塔面板（可选）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载脚本</span><br><span class="line">wget http://download.bt.cn/install/bt-uninstall.sh</span><br><span class="line">执行脚本</span><br><span class="line">sh bt-uninstall.sh</span><br></pre></td></tr></table></figure>

<h4 id="2、安装docker"><a href="#2、安装docker" class="headerlink" title="2、安装docker"></a>2、安装docker</h4><ul>
<li>先删除本机旧的或者残留的docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum remove docker \</span><br><span class="line">                docker-client \</span><br><span class="line">                docker-client-latest \</span><br><span class="line">                docker-common \</span><br><span class="line">                docker-latest \</span><br><span class="line">                docker-latest-logrotate \</span><br><span class="line">                docker-logrotate \</span><br><span class="line">                docker-engine</span><br></pre></td></tr></table></figure>

<ul>
<li>安装依赖</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum update -y &amp;&amp; <span class="built_in">sudo</span> yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<ul>
<li>配置镜像源</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 阿里源</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"># 清华源</span><br><span class="line">yum-config-manager --add-repo https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<ul>
<li>安装（二选一）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<ul>
<li>安装指定版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">docker-ce.x86_64                3:26.1.3-1.el8                  docker-ce-stable</span><br><span class="line">docker-ce.x86_64                3:26.1.2-1.el8                  docker-ce-stable</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择版本安装 例如docker-ce-26.1.3</span></span><br><span class="line"><span class="comment"># yum install docker-ce-&lt;版本号&gt; docker-ce-cli-&lt;版本号&gt; containerd.io</span></span><br><span class="line">yum install docker-ce-26.1.3 docker-ce-cli-26.1.3</span><br></pre></td></tr></table></figure>

<ul>
<li>安装containerd（上一步好像会安装依赖，没有的话就按以下步骤安装）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用rpm -qa命令查看是否安装</span><br><span class="line"># rpm -qa | grep containerd</span><br><span class="line">containerd.io-1.6.32-3.1.el8.x86_64</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看YUM源中containerd版本</span></span><br><span class="line">yum list | grep containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum -y install containerd.io-&lt;版本号&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置containerd服务启动及开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> containerd</span><br><span class="line">systemctl start containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证启动成功</span></span><br><span class="line">systemctl status containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Containerd客户端及服务端相关信息</span></span><br><span class="line">ctr version</span><br></pre></td></tr></table></figure>

<ul>
<li>验证docker</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker --version</span><br></pre></td></tr></table></figure>

<ul>
<li>启动并设置开机自启</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="docker启动报错"><a href="#docker启动报错" class="headerlink" title="docker启动报错"></a>docker启动报错</h5><p>1、更新<code>docker</code>后启动报错，以下指令都在<code>root</code>用户下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动docker</span></span><br><span class="line">[root@localhost ~]# service docker start</span><br><span class="line">Redirecting to /bin/systemctl start docker.service</span><br><span class="line">Job <span class="keyword">for</span> docker.service failed because the control process exited with error code.</span><br><span class="line">See <span class="string">&quot;systemctl status docker.service&quot;</span> and <span class="string">&quot;journalctl -xe&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看docker状态</span></span><br><span class="line">[root@localhost ~]# systemctl status docker.service</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: exit-code) since Wed 2024-07-31 09:06:33 CST; 8s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line">  Process: 2391 ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock (code=exited, status=1/FAILURE)</span><br><span class="line"> Main PID: 2391 (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: docker.service: Service RestartSec=2s expired, scheduling restart.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: docker.service: Scheduled restart job, restart counter is at 3.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: Stopped Docker Application Container Engine.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: docker.service: Start request repeated too quickly.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: docker.service: Failed with result <span class="string">&#x27;exit-code&#x27;</span>.</span><br><span class="line">7月 31 09:06:33 localhost.localdomain systemd[1]: Failed to start Docker Application Container Engine.</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调试</span></span><br><span class="line">[root@localhost ~]# dockerd --debug                                </span><br><span class="line">...</span><br><span class="line">WARN[2024-07-31T09:21:50.599480393+08:00] could not create bridge network <span class="keyword">for</span> <span class="built_in">id</span> 20e6fbfeebea5ebc9eb3be5e518399a886084976f33980d8d42ef4ee13401c34 bridge name docker0 <span class="keyword">while</span> booting up from persistent state: Failed to program NAT chain: ZONE_CONFLICT: <span class="string">&#x27;docker0&#x27;</span> already bound to a zone </span><br><span class="line">...</span><br><span class="line">failed to start daemon: Error initializing network controller: error creating default <span class="string">&quot;bridge&quot;</span> network: Failed to program NAT chain: ZONE_CONFLICT: <span class="string">&#x27;docker0&#x27;</span> already bound to a zone</span><br></pre></td></tr></table></figure>

<p>问题定位和解决:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取当前活动的防火墙区域（zones）信息</span></span><br><span class="line">[root@localhost ~]# firewall-cmd --get-active-zones</span><br><span class="line">public</span><br><span class="line">  interfaces: ens160</span><br><span class="line">trusted</span><br><span class="line">  interfaces: docker0</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 移除docker0</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --permanent --zone=trusted --remove-interface=docker0</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line"><span class="comment"># 删除daemon 或备份到别的地方</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /etc/docker/daemon.json</span><br><span class="line"><span class="comment"># 重启docker</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>发现启动还是报错，继续dockerd –debug，现在报错如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">failed to start daemon: Error initializing network controller: error creating default <span class="string">&quot;bridge&quot;</span> network: cannot create network 96b0b8273474a5cdf644ad11bf60c5f0a752ee63d05a5af6d22c433af6a4c4b2 (docker0): conflicts with network 20e6fbfeebea5ebc9eb3be5e518399a886084976f33980d8d42ef4ee13401c34 (docker0): networks have same bridge name</span><br></pre></td></tr></table></figure>

<p>怀疑问题出在<code>/var/docker/network/</code>，有很多socket存储在bridge上，这些socket都是用bridge的旧 ID 引用的。删除所有的套接字，删除接口，然后启动 docker，但所有容器都会因为套接字消失而无法工作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ip <span class="built_in">link</span> del docker0</span><br><span class="line"><span class="built_in">rm</span> -rf /var/docker/network/*</span><br><span class="line"><span class="comment"># sudo rm -rf /var/lib/docker/network</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/docker/network/files</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># delete all containers</span></span><br><span class="line">docker ps -a | <span class="built_in">cut</span> -d<span class="string">&#x27; &#x27;</span> -f 1 | xargs -n 1 <span class="built_in">echo</span> docker <span class="built_in">rm</span>  -f</span><br><span class="line"><span class="comment"># recreate all containers</span></span><br></pre></td></tr></table></figure>

<hr>
<p>2、使用非root用户启动报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dockerd --debug</span><br><span class="line">dockerd needs to be started with root privileges. To run dockerd <span class="keyword">in</span> rootless mode as an unprivileged user, see https://docs.docker.com/go/rootless/</span><br></pre></td></tr></table></figure>

<p>运行 Docker 守护程序（dockerd）通常需要 root 权限，但也可以以非特权用户的身份运行，这被称为 rootless 模式。在 rootless 模式下，你可以在没有 root 权限的情况下安全地运行 Docker。Docker 的 rootless 模式支持是从 Docker <strong>19.03</strong> 版本开始引入的，几乎所有比较新的 Docker 版本都支持。</p>
<ul>
<li><p>在普通用户的环境中，设置必要的环境变量，将以下内容添加到用户的 <code>~/.bashrc</code> 或 <code>~/.bash_profile</code> 中，加在最后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> DOCKER_HOST=unix://<span class="variable">$HOME</span>/.docker/run/docker.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>使配置生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 验证配置生效</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$DOCKER_HOST</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化 Docker rootless 环境</p>
<p>创建必要的目录和配置文件，生成一个 <code>dockerd-rootless.sh</code> 脚本，用于启动 <code>Docker rootless</code> 守护程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dockerd-rootless-setuptool.sh install --force</span><br><span class="line"><span class="comment"># [ERROR] Aborting because rootful Docker (/var/run/docker.sock) is running and accessible. Set --force to ignore</span></span><br><span class="line"><span class="comment"># 解决：停止和清理已有的 Docker 进程</span></span><br><span class="line"><span class="comment"># sudo systemctl stop docker</span></span><br><span class="line"><span class="comment"># sudo rm -rf /var/run/docker*</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 Docker rootless 守护程序</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl --user start docker</span><br><span class="line"># 或者手动执行生成的dockerd-rootless.sh脚本</span><br><span class="line">$HOME/bin/dockerd-rootless.sh --experimental</span><br></pre></td></tr></table></figure>


</li>
<li></li>
</ul>
<hr>
<p>使用k8s时，最好修改docker cgroup驱动，与k8s一致，使用systemd</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改docker cgroup驱动：native.cgroupdriver=systemd</span></span><br><span class="line"><span class="comment"># 镜像加速：https://github.com/dongyubin/DockerHub?tab=readme-ov-file</span></span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span></span><br><span class="line"><span class="string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span></span><br><span class="line"><span class="string">  &quot;log-opts&quot;: &#123;</span></span><br><span class="line"><span class="string">    &quot;max-size&quot;: &quot;100m&quot;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">	&quot;https://hub-mirror.c.163.com/&quot;</span></span><br><span class="line"><span class="string">	&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span></span><br><span class="line"><span class="string">	&quot;https://reg-mirror.qiniu.com&quot;</span></span><br><span class="line"><span class="string">	&quot;https://registry.docker-cn.com&quot;</span></span><br><span class="line"><span class="string">  	&quot;https://docker.mrxn.net&quot;,</span></span><br><span class="line"><span class="string">  	&quot;https://dockerhub.icu&quot;,</span></span><br><span class="line"><span class="string">  	&quot;https://doublezonline.cloud&quot;,</span></span><br><span class="line"><span class="string">  	&quot;https://docker.mrxn.net&quot;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># 重启使配置生效</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="comment"># 验证生效</span></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>



<h4 id="3、安装kubectl"><a href="#3、安装kubectl" class="headerlink" title="3、安装kubectl"></a>3、安装kubectl</h4><p>安装最新版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl</span><br></pre></td></tr></table></figure>

<p>安装指定版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.0/bin/linux/amd64/kubectl</span><br></pre></td></tr></table></figure>

<p>把安装包移动到path目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> ./kubectl /usr/local/bin/kubectl</span><br></pre></td></tr></table></figure>

<p>增加执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x kubectl</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h2><p><strong>官方文档</strong>：<a href="https://kubernetes.io/zh-cn/docs/home/">Kubernetes 文档 | Kubernetes</a></p>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，方便进行声明式配置和自动化。</p>
<h3 id="MiniKube"><a href="#MiniKube" class="headerlink" title="MiniKube"></a>MiniKube</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>Linux安装，选择对应cpu架构版本，通过<code>lscpu</code>命令查询cpu架构，其余架构类推</p>
<p>X86-64架构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line"><span class="built_in">sudo</span> install minikube-linux-amd64 /usr/local/bin/minikube &amp;&amp; <span class="built_in">rm</span> minikube-linux-amd64</span><br></pre></td></tr></table></figure>

<p>ARM64架构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-arm64</span><br><span class="line"><span class="built_in">sudo</span> install minikube-linux-arm64 /usr/local/bin/minikube &amp;&amp; <span class="built_in">rm</span> minikube-linux-arm64</span><br></pre></td></tr></table></figure>

<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p><strong>注意：无法使用root启动</strong>，添加<code>test</code>用户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser <span class="built_in">test</span></span><br><span class="line">passwd <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 切换普通用户</span></span><br><span class="line">su - username</span><br><span class="line"><span class="comment"># 切换root，要求输入root密码</span></span><br><span class="line">su -</span><br></pre></td></tr></table></figure>

<blockquote>
<p>普通用户执行sudo 命令报错：test 不在 sudoers 文件中。此事将被报告。</p>
<p>在root用户下执行 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ll /etc/sudoers</span></span><br><span class="line"><span class="comment"># 给root用户加可写权限</span></span><br><span class="line"><span class="built_in">chmod</span> 640 /etc/sudoers</span><br><span class="line"><span class="comment"># 修改文件</span></span><br><span class="line">vim /etc/sudoers</span><br><span class="line"><span class="comment"># 搜索文本：## Allow root to run any commands anywhere</span></span><br><span class="line"><span class="comment"># 在root下加入 test ALL=(ALL) ALL</span></span><br><span class="line"><span class="comment"># 还原权限</span></span><br><span class="line"><span class="built_in">chmod</span> 440 /etc/sudoers</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">minikube start</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line"><span class="comment"># minikube start --vm-driver=docker --base-image=&quot;anjone/kicbase&quot; --image-mirror-country=&#x27;cn&#x27; --kubernetes-version=v1.22.3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172-12-0-1 ~]# minikube start</span><br><span class="line">* Centos 8.5.2111 上的 minikube v1.33.1</span><br><span class="line">* 根据用户配置使用 docker 驱动程序</span><br><span class="line">* The <span class="string">&quot;docker&quot;</span> driver should not be used with root privileges. If you wish to <span class="built_in">continue</span> as root, use --force.</span><br><span class="line">* 如果您在VM中运行 minikube，请考虑使用 --driver=none:</span><br><span class="line">*   https://minikube.sigs.k8s.io/docs/reference/drivers/none/</span><br><span class="line"></span><br><span class="line">X 因 DRV_AS_ROOT 错误而退出：docker 驱动不应使用 root 权限。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：root账号启动docker导致无法启动</p>
</blockquote>
<blockquote>
<p>解决：先用root用户关闭docker，然后用test用户启动</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停用</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="comment"># 启用</span></span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 停用报错：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@172-12-0-1 ~]# systemctl stop docker</span><br><span class="line">Warning: Stopping docker.service, but it can still be activated by:</span><br><span class="line">  docker.socket</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：docker默认开启自动唤醒机制，在关闭状态下被访问会自动唤醒docker</p>
</blockquote>
<blockquote>
<p>解决：停用自动唤醒机制</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 停用自动唤醒机制</span><br><span class="line">systemctl stop docker.socket</span><br><span class="line"># 停用docker</span><br><span class="line">systemctl stop docker</span><br><span class="line"># 启用</span><br><span class="line">systemctl start docker.socket</span><br></pre></td></tr></table></figure>

<hr>
<p>再次启用<code>minikube</code>，还是报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ minikube start</span><br><span class="line">* Centos 8.5.2111 上的 minikube v1.33.1</span><br><span class="line">* Unable to pick a default driver. Here is what was considered, <span class="keyword">in</span> preference order:</span><br><span class="line">  - docker: Not healthy: <span class="string">&quot;docker version --format &#123;&#123;.Server.Os&#125;&#125;-&#123;&#123;.Server.Version&#125;&#125;:&#123;&#123;.Server.Platform.Name&#125;&#125;&quot;</span> <span class="built_in">exit</span> status 1: permission denied <span class="keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get <span class="string">&quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.45/version&quot;</span>: dial unix /var/run/docker.sock: connect: permission denied</span><br><span class="line">  - docker：建议：Add your user to the <span class="string">&#x27;docker&#x27;</span> group: <span class="string">&#x27;sudo usermod -aG docker $USER &amp;&amp; newgrp docker&#x27;</span> &lt;https://docs.docker.com/engine/install/linux-postinstall/&gt;</span><br><span class="line">* 或者你也可以安装以下驱动程序：</span><br><span class="line">  - kvm2: Not installed: <span class="built_in">exec</span>: <span class="string">&quot;virsh&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line">  - qemu2: Not installed: <span class="built_in">exec</span>: <span class="string">&quot;qemu-system-x86_64&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line">  - podman: Not installed: <span class="built_in">exec</span>: <span class="string">&quot;podman&quot;</span>: executable file not found <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line">  - virtualbox: Not installed: unable to find VBoxManage <span class="keyword">in</span> <span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">X 因 DRV_NOT_HEALTHY 错误而退出：找到个驱动程序，但没有一个是健康的。有关如何修复已安装的驱动程序的建议，请参阅上文。</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：需要docker组启动</p>
</blockquote>
<blockquote>
<p>解决：将test用户加入docker组</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建docker组</span></span><br><span class="line"><span class="built_in">sudo</span> groupadd docker</span><br><span class="line"><span class="comment"># 将test用户添加到docker组</span></span><br><span class="line"><span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 切换root用户设置docker组密码</span></span><br><span class="line">su -</span><br><span class="line">gpasswd docker</span><br><span class="line"><span class="comment"># test用户激活对组的修改</span></span><br><span class="line">su - <span class="built_in">test</span></span><br><span class="line">newgrp docker</span><br></pre></td></tr></table></figure>

<p>再次运行<code>minikube start</code>，会下载<code>Kubernetes</code> 的预加载文件，下载image失败</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E0731 11:24:42.377184    4531 cache.go:189] Error downloading kic artifacts:  failed to download kic base image or any fallback image</span><br><span class="line">...</span><br><span class="line">X 因 GUEST_PROVISION 错误而退出：error provisioning guest: Failed to start host: recreate: creating host: create: creating: setting up container node: preparing volume <span class="keyword">for</span> minikube container: docker run --<span class="built_in">rm</span> --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=<span class="literal">true</span> --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.44@sha256:eb04641328b06c5c4a14f4348470e1046bbcf9c2cbc551486e343d3a49db557e -d /var/lib: <span class="built_in">exit</span> status 125</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原因：1、k8s使用的docker Registry是google container register，在国内无法访问，所以image会拉取失败</p>
<p>2、因为有个镜像下载不下来，这个镜像不是从阿里云上下载的 gcr.io&#x2F;k8s-minikube&#x2F;kicbase:v0.0.10</p>
</blockquote>
<blockquote>
<p>解决：1、start 命令后添加镜像地区参数</p>
<p>2、查找替代的镜像，比如anjone&#x2F;kicbase</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上边拉取失败，删除iamge</span></span><br><span class="line">minikube delete</span><br><span class="line"><span class="comment">#下载对应镜像</span></span><br><span class="line">docker pull anjone/kicbase</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">minikube start --vm-driver=docker --base-image=<span class="string">&quot;anjone/kicbase&quot;</span> --image-mirror-country=<span class="string">&#x27;cn&#x27;</span> --kubernetes-version=v1.22.3</span><br></pre></td></tr></table></figure>

<p>启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">* 正在验证 Kubernetes 组件...</span><br><span class="line">  - 正在使用镜像 registry.cn-hangzhou.aliyuncs.com/google_containers/storage-provisioner:v5</span><br><span class="line">* 启用插件： storage-provisioner, default-storageclass</span><br><span class="line">* kubectl 未找到。如果你需要使用它，请尝试：<span class="string">&#x27;minikube kubectl -- get pods -A&#x27;</span></span><br><span class="line">* 完成！kubectl 现在已配置，默认使用<span class="string">&quot;minikube&quot;</span>集群和<span class="string">&quot;default&quot;</span>命名空间</span><br></pre></td></tr></table></figure>

<p>验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ minikube kubectl -- get pods -A</span><br><span class="line"></span><br><span class="line">NAMESPACE     NAME                               READY   STATUS             RESTARTS      AGE</span><br><span class="line">kube-system   coredns-7d89d9b6b8-vwcrc           0/1     CrashLoopBackOff   3 (35s ago)   95s</span><br><span class="line">kube-system   etcd-minikube                      1/1     Running            0             107s</span><br><span class="line">kube-system   kube-apiserver-minikube            1/1     Running            0             107s</span><br><span class="line">kube-system   kube-controller-manager-minikube   1/1     Running            0             107s</span><br><span class="line">kube-system   kube-proxy-ws9cw                   1/1     Running            0             95s</span><br><span class="line">kube-system   kube-scheduler-minikube            1/1     Running            0             107s</span><br><span class="line">kube-system   storage-provisioner                1/1     Running            1 (73s ago)   106s</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动Dashboard</span></span><br><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure>

<blockquote>
<p>启动失败：一直卡在 <code>正在验证 proxy 运行状况 ...</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用Dashboard（默认是disabled的）</span></span><br><span class="line"><span class="comment"># Dashboard是kubernetes addon,Addons是利用kubernetes的资源（DaemonSet, Deployment等）实现的，在整个集群层面的上功能(cluster feature)</span></span><br><span class="line">minikube addons list</span><br><span class="line"><span class="comment"># 启用Dashboard</span></span><br><span class="line">minikube addons <span class="built_in">enable</span> dashboard</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看更详细的报错信息</span><br><span class="line">minikube dashboard --alsologtostderr -v=1</span><br><span class="line"># 发现启动一直报 503 错误，然后不断地重试</span><br><span class="line"># 执行以下命令查看所有pod，发现 kubernetes-dashboard 一直没启动成功，在不断地重试</span><br><span class="line">minikube kubectl -- get pods -A</span><br><span class="line"># 执行如下命令查看该 Pod 的 log</span><br><span class="line">kubectl logs --namespace=kubernetes-dashboard kubernetes-dashboard-744fc84fb7-bxkmq</span><br><span class="line"># Error from server (BadRequest): container &quot;kubernetes-dashboard&quot; in pod &quot;kubernetes-dashboard-744fc84fb7-bxkmq&quot; is waiting to start: trying and failing to pull image</span><br><span class="line">kubectl describe pod kubernetes-dashboard-744fc84fb7-bxkmq --namespace kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<ul>
<li>拉取metrics-scraper镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 手动pull</span></span><br><span class="line"><span class="comment"># https://github.com/kubernetes-sigs/dashboard-metrics-scraper查看最新版本</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-scraper:v1.0.8</span><br><span class="line"></span><br><span class="line"><span class="comment">#打上tag</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-scraper:v1.0.8 docker.io/kubernetesui/metrics-scraper:v1.0.8</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像导入minikube</span></span><br><span class="line">minikube image load kubernetesui/metrics-scraper:v1.0.</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新生成pod</span></span><br><span class="line"><span class="comment"># kubectl delete pod -n &lt;podNameSpace&gt; &lt;podName&gt;</span></span><br><span class="line">kubectl delete pod -n kubernetes-dashboard dashboard-metrics-scraper-687748788c-bczzs</span><br></pre></td></tr></table></figure>

<ul>
<li>拉取dashboard镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#手动pull</span></span><br><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/dashboard:v2.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#打上tag</span></span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/dashboard:v2.7.0 kubernetesui/dashboard:v2.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将镜像导入minikube</span></span><br><span class="line">minikube image load kubernetesui/dashboard:v2.7.0</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新生成pod</span></span><br><span class="line">kubectl delete pod -n kubernetes-dashboard dkubernetes-dashboard-744fc84fb7-bxkmq</span><br></pre></td></tr></table></figure>

<blockquote>
<p>不知道怎么查看镜像最新版本，后面再补充，可能要登录阿里云控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search registry.cn-hangzhou.aliyuncs.com/google_containers/&lt;镜像名&gt;</span><br></pre></td></tr></table></figure>

<p>这种方式报错：Error response from daemon: Unexpected status code 404</p>
</blockquote>
<p>再次检查pod状态：<code>minikube kubectl -- get pods -A</code>，发现pod正常了</p>
<p>使用 <code>minikube dashboard</code>启动，<a href="http://127.0.0.1:42975/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/">http://127.0.0.1:42975/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</a></p>
</blockquote>
<blockquote>
<p>补充：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成 /etc/containerd/config.toml文件</span></span><br><span class="line">containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认使用的是官方源，很慢，需要换成国内源</span></span><br><span class="line"><span class="comment"># 修改配置文件：/etc/containerd/config.toml</span></span><br><span class="line"><span class="comment"># 在[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]下边添加如下内容：</span></span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">  endpoint = [<span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>, <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>, <span class="string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span>]</span><br><span class="line">[plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;k8s.gcr.io&quot;</span>]</span><br><span class="line">  endpoint = [<span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers&quot;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启containerd</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart containerd</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>重新启动后发现 <code>dashboard-metrics-scraper</code> 又拉取不了镜像了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有镜像</span></span><br><span class="line">docker images</span><br><span class="line"><span class="comment"># 发现有两个一样的镜像</span></span><br><span class="line"><span class="comment"># kubernetesui/metrics-scraper                                          v1.0.9    ac9017206ce5   16 months ago   43.8MB</span></span><br><span class="line"><span class="comment"># registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-scraper   v1.0.9    ac9017206ce5   16 months ago   43.8MB</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除镜像 image id 前3位就行</span></span><br><span class="line">docker rmi ac9</span><br><span class="line"><span class="comment"># 报错：Error response from daemon: conflict: unable to delete ac9017206ce5 (must be forced) - image is referenced in multiple repositories</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除多余的标签：如果镜像被多个标签引用，可以逐个删除这些标签来解决问题</span></span><br><span class="line"><span class="comment"># docker rmi -f repository/image:tag</span></span><br><span class="line">docker rmi -f kubernetesui/metrics-scraper:v1.0.9</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>minikube kubectl – get pods -A查看pod 发现 coredns CrashLoopBackOff 问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ minikube kubectl -- get pods -A</span><br><span class="line">NAMESPACE             NAME          READY    STATUS         RESTARTS   AGE</span><br><span class="line">kube-system coredns-7d89d9b6b8-vwcrc 0/1 CrashLoopBackOff 50 (25s ago) 18h</span><br></pre></td></tr></table></figure>

<p>查看日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ kubectl logs -f coredns-7d89d9b6b8-vwcrc -n kube-system</span><br><span class="line"> [FATAL] plugin/loop: Loop (127.0.0.1:39174 -&gt; :53) detected <span class="keyword">for</span> zone <span class="string">&quot;.&quot;</span>, see https://coredns.io/plugins/loop#troubleshooting. Query: <span class="string">&quot;HINFO 1252716524163381999.4934294265190733081.&quot;</span></span><br><span class="line"> </span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ kubectl describe pod coredns-7d89d9b6b8-vwcrc -n kube-system</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason   Age                     From     Message</span><br><span class="line">  ----     ------   ----                    ----     -------</span><br><span class="line">  Normal   Pulled   15h (x37 over 18h)      kubelet  Container image <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:v1.8.4&quot;</span> already present on machine</span><br><span class="line">  Warning  BackOff  2m52s (x1078 over 18h)  kubelet  Back-off restarting failed container</span><br></pre></td></tr></table></figure>

<p>发现出现了Loop…detected…，这意味着<code>loop</code>检测插件已检测到上游 DNS 服务器之一中的无限转发循环</p>
<p>当 Kubernetes 中部署的 CoreDNS Pod 检测到循环时，CoreDNS Pod 将开始“CrashLoopBackOff”。 这是因为每次 CoreDNS 检测到循环并退出时，Kubernetes 都会尝试重新启动 Pod</p>
<p>转发循环通常由以下原因引起：</p>
<ul>
<li>最常见的是，CoreDNS 将请求直接转发给自身。例如，通过环回地址，例如127.0.0.1，::1或127.0.0.53</li>
<li>较不常见的是，CoreDNS转发到上游服务器，而上游服务器又将请求转发回CoreDNS。</li>
</ul>
<p>解决办法：</p>
<p>替换<code>forward . /etc/resolv.conf</code>为您上游 DNS 的 IP 地址，例如<code>forward . 8.8.8.8.</code> 但这只是解决了 CoreDNS 的问题，kubelet 会继续将无效的转发resolv.conf到所有defaultdnsPolicy Pod，让它们无法解析 DNS</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改系统/etc/resolv.conf文件</span></span><br><span class="line">$ vim /etc/resolv.conf</span><br><span class="line"><span class="comment"># 在文件后添加</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br><span class="line"></span><br><span class="line">$ kubectl edit -n kube-system cm coredns</span><br><span class="line"><span class="comment"># Please edit the object below. Lines beginning with a &#x27;#&#x27; will be ignored,</span></span><br><span class="line"><span class="comment"># and an empty file will abort the edit. If an error occurs while saving this file will be</span></span><br><span class="line"><span class="comment"># reopened with the relevant failures.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  Corefile: |</span><br><span class="line">    .:53 &#123;</span><br><span class="line">        <span class="built_in">log</span></span><br><span class="line">        errors</span><br><span class="line">        health &#123;</span><br><span class="line">           lameduck 5s</span><br><span class="line">        &#125;</span><br><span class="line">        ready</span><br><span class="line">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span><br><span class="line">           pods insecure</span><br><span class="line">           fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">           ttl 30</span><br><span class="line">        &#125;</span><br><span class="line">        prometheus :9153</span><br><span class="line">        hosts &#123;</span><br><span class="line">           192.168.49.1 host.minikube.internal</span><br><span class="line">           fallthrough</span><br><span class="line">        &#125;</span><br><span class="line">        forward . /etc/resolv.conf &#123;</span><br><span class="line">           max_concurrent 1000</span><br><span class="line">        &#125;</span><br><span class="line">        cache 30</span><br><span class="line">        <span class="comment">#loop  // 注释这里</span></span><br><span class="line">        reload</span><br><span class="line">        loadbalance</span><br><span class="line">    &#125;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: <span class="string">&quot;2024-07-31T07:10:41Z&quot;</span></span><br><span class="line">  name: coredns</span><br><span class="line">  namespace: kube-system</span><br><span class="line">  resourceVersion: <span class="string">&quot;22986&quot;</span></span><br><span class="line">  uid: 80c66b34-4e84-4f9c-b020-a87be7c5d3df</span><br></pre></td></tr></table></figure>

<p>将coredns的pod重新删除后就恢复正常</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl delete -n kube-system pod &lt;podName&gt;</span><br><span class="line"><span class="comment"># 验证，发现状态正常了</span></span><br><span class="line">$ minikube kubectl -- get pods -A</span><br></pre></td></tr></table></figure>
</blockquote>
<p>为Dashboard分配一个固定端口	</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># address为虚拟机ip， ip a指令查看ensXXX的inet</span><br><span class="line">kubectl proxy --address=&#x27;192.168.64.128&#x27; --accept-hosts=&#x27;^*$&#x27; --port=8001</span><br></pre></td></tr></table></figure>

<blockquote>
<p>端口占用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172-12-0-1 ~]# kubectl proxy --address=<span class="string">&#x27;0.0.0.0&#x27;</span>  --accept-hosts=<span class="string">&#x27;^*$&#x27;</span> --port=8001</span><br><span class="line">error: listen tcp 0.0.0.0:8001: <span class="built_in">bind</span>: address already <span class="keyword">in</span> use</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装net-tools工具（netstat命令未找到的时候需要安装）</span></span><br><span class="line">yum install -y net-tools</span><br><span class="line"></span><br><span class="line"><span class="comment"># netstat -tulpn [| grep 8001]</span></span><br><span class="line">netstat -tulpn | grep 8001</span><br><span class="line"></span><br><span class="line">tcp6  0  0 	:::8001  	:::*  	LISTEN  	62614/kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放端口占用</span></span><br><span class="line"><span class="built_in">kill</span> -9 62614</span><br></pre></td></tr></table></figure>
</blockquote>
<p>访问<a href="http://192.168.64.128:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/%E6%8A%A5%E9%94%99">http://192.168.64.128:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/报错</a> <code>dial tcp 192.168.64.128:6443: connect: connection refused</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@172-12-0-1 ~]# kubectl proxy --address=<span class="string">&#x27;192.168.64.128&#x27;</span>  --accept-hosts=<span class="string">&#x27;^*$&#x27;</span> --port=8001</span><br><span class="line">Starting to serve on 192.168.64.128:8001</span><br><span class="line">E0801 10:55:04.678103  104769 proxy_server.go:147] Error <span class="keyword">while</span> proxying request: dial tcp 192.168.64.128:6443: connect: connection refused</span><br></pre></td></tr></table></figure>

<p>通常表示 <code>kubectl proxy</code> 无法连接到 Kubernetes API Server，可以从以下方面排查：</p>
<ul>
<li><p>Kubernetes API Server 未启动或不可访问</p>
<p>确保 Kubernetes 的 API Server 在 Minikube 中正常运行，如果状态为 <code>Running</code>，则 API Server 应该在运行中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ minikube status</span><br><span class="line">minikube</span><br><span class="line"><span class="built_in">type</span>: Control Plane</span><br><span class="line">host: Running</span><br><span class="line">kubelet: Running</span><br><span class="line">apiserver: Running</span><br><span class="line">kubeconfig: Configured</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络配置问题</p>
<p>确保你的网络配置允许 <code>kubectl proxy</code> 访问 Minikube 的 API Server。有时可能需要调整防火墙或者网络策略以允许从你的机器（192.168.64.128）到 Minikube 虚拟机的6443端口的连接。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确保防火墙打开</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --state</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前的防火墙规则</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --list-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许访问6443端口</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --zone=public --add-port=6443/tcp --permanent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载防火墙设置</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证端口访问</span></span><br><span class="line">telnet 192.168.64.128 6443</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">nc -zv 192.168.64.128 6443</span><br></pre></td></tr></table></figure>
</li>
<li><p>kubectl 配置</p>
<p>确保 kubectl 配置正确指向 Minikube</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl config current-context</span><br></pre></td></tr></table></figure></li>
</ul>
<p>到这里应该可以正常启动dashboard了，浏览器访问：<a href="http://192.168.64.128:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/">http://192.168.64.128:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/</a></p>
<hr>
<h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><h4 id="nginx部署"><a href="#nginx部署" class="headerlink" title="nginx部署"></a>nginx部署</h4><p>使用 <code>kubectl create</code> 命令创建管理 Pod 的 Deployment。该 Pod 根据提供的 Docker 镜像运行 Container</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要先拉取nginx镜像</span></span><br><span class="line">$ docker pull nginx:latest</span><br><span class="line">$ minikube image load nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行一个名称为 nginx-deployment 的 pod 作为 nginx 镜像的 Deployment</span></span><br><span class="line">$ kubectl create deployment nginx-deployment --image=nginx:latest</span><br><span class="line">$ kubectl get deployment nginx-deployment -o yaml &gt; deployment.yaml</span><br><span class="line"><span class="comment"># 编辑生成的 deployment.yaml 文件，找到 containers 部分，修改 imagePullPolicy 为 Never。</span></span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: nginx</span><br><span class="line">      image: nginx:latest</span><br><span class="line">      imagePullPolicy: Never</span><br><span class="line">      ...</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 删除 Deployment</span></span><br><span class="line">$ kubectl delete -n default deployment nginx-deployment</span><br><span class="line"><span class="comment"># 应用更新</span></span><br><span class="line">$ kubectl apply -f deployment.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Deployment</span></span><br><span class="line">kubectl get deployments</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 Pod</span></span><br><span class="line">kubectl get pods</span><br><span class="line"><span class="comment"># 删除 Pod</span></span><br><span class="line"><span class="comment"># kubectl delete -n default pod hello-nginx-557d767db6-zgtjf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 状态变成Ready代表可用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群事件</span></span><br><span class="line">kubectl get events</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 kubectl 配置</span></span><br><span class="line">kubectl config view</span><br></pre></td></tr></table></figure>

<p>nginx 运行成功</p>
<p><a href="https://imgse.com/i/pkj9q41"><img src="https://s21.ax1x.com/2024/08/02/pkj9q41.png" alt="pkj9q41.png"></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment nginx --port=80 --target-port=80 --type=NodePort</span><br><span class="line"></span><br><span class="line">minikube service nginx-deployment --url</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>微服务学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim使用教程</title>
    <url>/2024/07/29/Vim%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC] </p>
<h2 id="Vim使用教程"><a href="#Vim使用教程" class="headerlink" title="Vim使用教程"></a>Vim使用教程</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a><strong>简介</strong></h3><p>一款高度可配置的文本编辑器。</p>
<h3 id="Vim模式"><a href="#Vim模式" class="headerlink" title="Vim模式"></a><strong>Vim模式</strong></h3><h4 id="1、常规模式"><a href="#1、常规模式" class="headerlink" title="1、常规模式"></a><strong>1、常规模式</strong></h4><p>启动编辑器时默认就处于此模式，以下是一些可以在常规模式下使用到的基本命令：</p>
<ul>
<li><strong>移动</strong>：<ul>
<li>方向键</li>
<li><code>h</code> ：左</li>
<li><code>l</code>  ：右</li>
<li><code>j</code>  ：下</li>
<li><code>k</code> ：上</li>
</ul>
</li>
<li><strong>插入：</strong><ul>
<li><code>i</code> ：在光标处插入文本</li>
<li><code>a</code> ：在光标后插入文本</li>
<li><code>A</code> ：在行尾开始插入文本</li>
<li><code>I</code> ： 在行首插入文本</li>
<li><code>o</code> ：在当前行后插入一个新行</li>
<li><code>O</code> ：在当前行前插入一个新行</li>
</ul>
</li>
<li><strong>删除：</strong><ul>
<li><code>x</code> ：删除光标处的文本</li>
<li><code>X</code> ：删除光标前的一个文本，相当于<code>BackSpace</code>键</li>
</ul>
</li>
<li><strong>修改：</strong><ul>
<li><code>r</code> ：替换光标处文本</li>
<li><code>R</code> ：使用寄存器替换光标处文本，可以修改光标后的文本，相当于<code>Insert</code>键</li>
</ul>
</li>
<li><strong>复制和粘贴：</strong><ul>
<li><code>yy</code> ：将文本剪切到剪贴板</li>
<li><code>Y</code>：将一行文本剪切到剪贴板</li>
<li><code>p</code> ：在当前行前粘贴剪贴板的文本</li>
<li><code>P</code>：在当前行后粘贴剪贴板的文本</li>
</ul>
</li>
<li><strong>其他：</strong><ul>
<li>. ：重复上一个命令</li>
<li>$ ：移至行尾</li>
<li>^ ：移至行首</li>
</ul>
</li>
<li></li>
<li></li>
</ul>
<h4 id="2、可视模式"><a href="#2、可视模式" class="headerlink" title="2、可视模式"></a>2、<strong>可视模式</strong></h4><p>按<code>v</code>键进入可视模式，以下是在可视模式中可以使用的一些基本命令：</p>
<ul>
<li><strong>选择：</strong><ul>
<li>方向键</li>
<li><code>h</code>：左</li>
<li><code>l</code>：右</li>
<li><code>j</code>：下</li>
<li><code>k</code>：上</li>
<li><code>V</code>：选择行</li>
<li><code>v</code>：选择字符</li>
</ul>
</li>
<li><strong>删除：</strong><ul>
<li><code>x</code> ：删除选定的文本</li>
<li><code>X</code> ：删除光标所在行</li>
</ul>
</li>
<li><strong>复制和粘贴：</strong><ul>
<li><code>y</code> ：复制选定的文本</li>
<li><code>Y</code> ：复制一整行文本</li>
<li><code>p</code> ：在当前行之前粘贴剪贴板中的文本</li>
<li><code>P</code> ：在当前行之后粘贴剪贴板中的文本</li>
</ul>
</li>
<li>其他：<ul>
<li><code>.</code> ：重复上一个命令</li>
<li><code>G</code> ：移至文件末尾</li>
<li><code>gg</code> ：移至文件开头</li>
<li><code>^</code> ：移至行首</li>
<li><code>$</code> ：移至行尾</li>
<li><code>%</code> ：更改后重复上一个命令</li>
</ul>
</li>
</ul>
<h4 id="3、选择模式"><a href="#3、选择模式" class="headerlink" title="3、选择模式"></a><strong>3、选择模式</strong></h4><p>选择模式看起来像可视模式，在最后一行会显示<code>– 选择 –</code>。</p>
<p>进入选择模式：</p>
<ul>
<li>从可视化模式，按下 <code>CTRL + G</code>。</li>
</ul>
<p>以下是可以用于选择模式的一些基本命令：</p>
<ul>
<li>可打印字符、 和 会导致删除选定内容，Vim 进入插入模式。插入所键入字符。</li>
<li>不可打印的移动命令，同时按下 Shift 键，会扩展所选内容。“keymodel”必须包含“startsel”。</li>
<li>不可打印的移动命令，未按下 Shift 键，会停止选择模式。“keymodel”必须包含“stopsel”。</li>
<li><code>CTRL + O</code> 在一个命令的持续时间内切换至可视化模式</li>
<li><code>CTRL + G</code> 切换至可视模式。</li>
</ul>
<h4 id="4、插入模式"><a href="#4、插入模式" class="headerlink" title="4、插入模式"></a><strong>4、插入模式</strong></h4><p>按 <code>i</code> 键进入插入模式，在插入模式中可以<strong>添加</strong>新文本或<strong>修改</strong>文本。</p>
<p>以下是一些可以在插入模式下使用到的基本命令：</p>
<ul>
<li>插入：<ul>
<li><code>a</code> ：在光标后插入文本。</li>
<li><code>A</code> ：在行尾开始插入文本。</li>
<li><code>I</code> ：在行首插入文本。</li>
<li><code>o</code> ：在当前行后插入一个新行。</li>
<li><code>O</code> ：在当前行前插入一个新行。</li>
</ul>
</li>
<li>其他：<ul>
<li><code>Esc</code> ：退出插入模式并返回常规模式。</li>
</ul>
</li>
</ul>
<h4 id="5、命令模式"><a href="#5、命令模式" class="headerlink" title="5、命令模式"></a><strong>5、命令模式</strong></h4><p>按 <code>:</code> 键将进入命令模式，可以在其中输入 Vim 命令。</p>
<p>以下是在命令模式中可以使用的一些基本命令：</p>
<ul>
<li><code>:w</code> ：在不退出 Vim 的情况下写入或保存文件</li>
<li><code>:q</code> ：退出 Vim。如果有未保存的更改，系统会提示您放弃它们</li>
<li><code>:q!</code>：不保存任何更改而退出 Vim</li>
<li><code>:qa!</code> ： 退出所有窗口并放弃所有未保存的更改</li>
<li><code>:e filename</code> ：打开一个新文件进行编辑</li>
<li><code>:r filename</code> ：在光标位置读取或插入文件的内容</li>
<li><code>/pattern</code> ：在文件中搜索模式。按 <code>n</code> 移动到模式的下一个出现处，按 <code>N</code> 移动到上一个出现处</li>
<li><code>:set paste</code> ：进入粘贴模式，以防止从 Vim 外部粘贴文本时自动缩进</li>
<li><code>:set number</code> 或 <code>:set nu</code> ：在左页边距显示行号</li>
<li><code>:set spell</code> ：为当前文件启用拼写检查</li>
<li><code>:set nospell</code> ：禁用拼写检查</li>
<li><code>:s/old/new/g</code> ：将当前行中的所有<code>old</code>替换为<code>new</code>。使用计数，例如<code>:s/old/new/g 3</code>，以应用替换三次</li>
<li><code>:g/pattern/d</code> ：删除所有与模式匹配的行</li>
</ul>
<h4 id="6-Ex-模式"><a href="#6-Ex-模式" class="headerlink" title="6. Ex 模式"></a>6. <strong>Ex 模式</strong></h4><p>按<code>Q</code>键将进入 ex 模式，可以在 ex 模式中执行 Vim 命令，命令执行后不会离开命令模式，可以继续输入命令并执行。</p>
<h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a><strong>导航</strong></h3><h4 id="在文件中移动"><a href="#在文件中移动" class="headerlink" title="在文件中移动"></a><strong>在文件中移动</strong></h4><ul>
<li><code>h</code> ：光标向左移动</li>
<li><code>l</code> ：光标向右移动</li>
<li><code>j</code> ：光标向下移动</li>
<li><code>k</code> ：光标向上移动</li>
<li><code>0</code>（零）：将光标移到行首</li>
<li><code>^</code> ：将光标移到该行的第一个非空白字符</li>
<li><code>$</code> ：将光标移到该行的末尾</li>
<li><code>g_</code> ：将光标移到该行的最后一个非空白字符</li>
<li><code>G</code>：将光标移到文件的最后一行</li>
<li><code>gg</code>：将光标移到文件的首行</li>
<li><code>Ctrl + D</code> ：向下滚动半屏</li>
<li><code>Ctrl + U</code> ：向上滚动半屏</li>
<li><code>Ctrl + F</code> ：向前移动整个屏幕</li>
<li><code>Ctrl + B</code> ：向后移动整个屏幕</li>
<li><code>H</code> ：将光标移到屏幕顶部</li>
<li><code>M</code> ：将光标移到屏幕中间</li>
<li><code>L</code> ：将光标移到屏幕底部</li>
</ul>
<h4 id="跳转到特定行或单词"><a href="#跳转到特定行或单词" class="headerlink" title="跳转到特定行或单词"></a><strong>跳转到特定行或单词</strong></h4><ul>
<li><code>10G</code> | <code>10gg</code> | <code>:10</code>：跳转到第 10 行</li>
<li><code>*</code>：搜索光标下的单词</li>
<li><code>#</code>：向后搜索光标下的单词</li>
</ul>
<h4 id="在搜索结果中移动"><a href="#在搜索结果中移动" class="headerlink" title="在搜索结果中移动"></a><strong>在搜索结果中移动</strong></h4><ul>
<li><code>/foo</code> : 查找<code>foo</code></li>
<li><code>n</code>：将光标移到下一个匹配项（向前）</li>
<li><code>N</code>：将光标移到上一个匹配项（向后）</li>
</ul>
<h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a><strong>文本编辑</strong></h3><h4 id="插入和追加文本"><a href="#插入和追加文本" class="headerlink" title="插入和追加文本"></a><strong>插入和追加文本</strong></h4><ul>
<li><code>i</code> ：在光标前插入文本</li>
<li><code>I </code>：在行的开头插入文本</li>
<li><code>a</code> ：在光标后追加文本</li>
<li><code>A</code> ：在行的末尾追加文本</li>
</ul>
<h4 id="编辑行"><a href="#编辑行" class="headerlink" title="编辑行"></a><strong>编辑行</strong></h4><ul>
<li><code>J</code> ：将当前行与下一行连接</li>
<li><code>cc</code> | <code>S</code> ：更改整行内容（删除并进入插入模式）</li>
<li><code>cw</code> ：更改光标下的单词（删除并进入插入模式）</li>
<li><code>C</code> ：从光标位置更改剩余行（删除并进入插入模式）</li>
<li><code>r</code> ：用另一个字符替换光标下的单个字符</li>
<li><code>R</code> ：输入替换模式；替换多个字符，直到按 <code>Esc</code></li>
<li><code>g~</code> ：反转光标下字符的大小写</li>
</ul>
<h4 id="删除文本"><a href="#删除文本" class="headerlink" title="删除文本"></a><strong>删除文本</strong></h4><ul>
<li><code>x</code>：删除光标下的字符</li>
<li><code>X</code>：删除光标前的字符</li>
<li><code>dd</code>：删除整行</li>
<li><code>D</code>：从光标位置删除剩余行（剪切），光标所在字符也会被删除</li>
<li><code>cw</code>：更改光标下的单词（删除并进入插入模式）</li>
</ul>
<h4 id="复制和粘贴文本"><a href="#复制和粘贴文本" class="headerlink" title="复制和粘贴文本"></a><strong>复制和粘贴文本</strong></h4><ul>
<li><code>yy</code>：将整行内容剪切（复制）到默认寄存器</li>
<li><code>yw</code>：将光标下的单词剪切（复制）到默认寄存器</li>
<li><code>p</code>：在光标位置前粘贴默认寄存器的内容</li>
<li><code>P</code>：在光标位置后粘贴默认寄存器的内容</li>
</ul>
<h4 id="撤销和重做更改"><a href="#撤销和重做更改" class="headerlink" title="撤销和重做更改"></a><strong>撤销和重做更改</strong></h4><ul>
<li><code>u</code>：撤销对文件进行的最后一次更改</li>
<li><code>Ctrl + R</code> ：重做最后一次撤销的更改</li>
</ul>
<h3 id="搜索和替换文本"><a href="#搜索和替换文本" class="headerlink" title="搜索和替换文本"></a><strong>搜索和替换文本</strong></h3><h4 id="基本搜索命令"><a href="#基本搜索命令" class="headerlink" title="基本搜索命令"></a><strong>基本搜索命令</strong></h4><ul>
<li><code>/foo</code>：<strong>向后</strong>搜索单词 <code>foo</code></li>
<li><code>?bar</code>：<strong>向前</strong>搜索单词 <code>bar</code></li>
<li><code>n</code>：搜索后将光标移至下一个匹配项</li>
<li><code>N</code>：搜索后将光标移至上一个匹配项</li>
</ul>
<h4 id="高级搜索命令"><a href="#高级搜索命令" class="headerlink" title="高级搜索命令"></a><strong>高级搜索命令</strong></h4><ul>
<li><code>:%s/foo/bar/g</code>：在整个文件中查找并用 <code>bar</code> 替换所有出现的 <code>foo</code></li>
</ul>
<h3 id="缩进和格式化"><a href="#缩进和格式化" class="headerlink" title="缩进和格式化"></a><strong>缩进和格式化</strong></h3><h4 id="调整缩进"><a href="#调整缩进" class="headerlink" title="调整缩进"></a><strong>调整缩进</strong></h4><ul>
<li><code>&gt;&gt;</code>：将当前行或选定的行缩进一个制表符位（或移位宽度）</li>
<li><code>&lt;&lt;</code>：将当前行或选定的行向外缩进一个制表符位（或移位宽度）</li>
<li><code>==</code>：将当前行或选定的行缩进到正确的缩进级别</li>
</ul>
<h4 id="格式化段落和代码块"><a href="#格式化段落和代码块" class="headerlink" title="格式化段落和代码块"></a><strong>格式化段落和代码块</strong></h4><ul>
<li><code>gqip</code>：格式化当前段落（两行空格之间的文本）</li>
<li><code>=ap</code>：格式化选定的代码块</li>
<li><code>gwap</code>：将选定的代码块与其镜像交换（例如，翻转函数体）</li>
<li><code>gg=G</code>：格式化整个文件</li>
</ul>
<h3 id="代码折叠和切换"><a href="#代码折叠和切换" class="headerlink" title="代码折叠和切换"></a><strong>代码折叠和切换</strong></h3><h4 id="折叠和展开区域"><a href="#折叠和展开区域" class="headerlink" title="折叠和展开区域"></a><strong>折叠和展开区域</strong></h4><ul>
<li><code>zf</code>：可视模式选择行，将当前行或选定的行折叠到区域中</li>
<li><code>:10,20fold</code> ：折叠指定行范围的代码块</li>
<li><code>za</code>：切换当前行的折叠状态（如果折叠，则打开；如果未折叠，则关闭）</li>
<li><code>zM</code>：关闭当前缓冲区中的所有折叠</li>
<li><code>zR</code>：打开当前缓冲区中的所有折叠</li>
</ul>
<h4 id="设置折叠级别"><a href="#设置折叠级别" class="headerlink" title="设置折叠级别"></a><strong>设置折叠级别</strong></h4><ul>
<li><code>zm</code>：折叠级别减一（关闭折叠或打开更嵌套的折叠）</li>
<li><code>zr</code>：折叠级别加一（打开折叠或创建新折叠）</li>
</ul>
<h3 id="缓冲区管理"><a href="#缓冲区管理" class="headerlink" title="缓冲区管理"></a><strong>缓冲区管理</strong></h3><h4 id="列出和切换缓冲区"><a href="#列出和切换缓冲区" class="headerlink" title="列出和切换缓冲区"></a><strong>列出和切换缓冲区</strong></h4><ul>
<li><code>:ls</code>：列出当前 Vim 会话中的所有缓冲区</li>
<li><code>:b foo</code>：切换到名为 <code>foo</code> 的缓冲区</li>
<li><code>Ctrl+Shift+6</code> ：在最后使用过的两个缓冲区之间切换</li>
</ul>
<h4 id="分割和关闭窗口"><a href="#分割和关闭窗口" class="headerlink" title="分割和关闭窗口"></a><strong>分割和关闭窗口</strong></h4><ul>
<li><code>:split</code> 或 <code>:sp</code>：在当前选项卡页中打开一个包含相同文件的新窗口</li>
<li><code>:split path/to/another/file</code> ：在新窗口打开另一个文件</li>
<li><code>:vsplit</code> 或 <code>:vsp</code>：在当前选项卡页中打开一个包含相同文件的新垂直窗口</li>
<li><code>:vsplit path/to/another/file</code> ：在新窗口打开另一个文件</li>
<li><code>Ctrl + W</code> <code>Ctrl + W</code>：切换窗口</li>
<li><code>:q</code>：退出窗口</li>
</ul>
<h3 id="调整窗口大小"><a href="#调整窗口大小" class="headerlink" title="调整窗口大小"></a><strong>调整窗口大小</strong></h3><ul>
<li><code>Ctrl + W +</code>：将当前窗口的高度增加一行</li>
<li><code>Ctrl + W -</code>：将当前窗口的高度减少一行</li>
<li><code>Ctrl + W &gt;</code>：将当前窗口的宽度增加一列</li>
<li><code>Ctrl + W &lt;</code>：将当前窗口的宽度减少一列</li>
<li><code>Ctrl + W =</code>：将当前窗口水平等分</li>
<li><code>Ctrl + W |</code>：将当前窗口垂直等分</li>
</ul>
<h3 id="移动窗口"><a href="#移动窗口" class="headerlink" title="移动窗口"></a><strong>移动窗口</strong></h3><ul>
<li><code>Ctrl + W + h</code>：将当前窗口移到左边</li>
<li><code>Ctrl + W + j</code>：将当前窗口向下移动</li>
<li><code>Ctrl + W + k</code>：将当前窗口向上移动</li>
<li><code>Ctrl + W + l</code>：将当前窗口移到右边</li>
</ul>
<h3 id="窗口导航"><a href="#窗口导航" class="headerlink" title="窗口导航"></a><strong>窗口导航</strong></h3><ul>
<li><code>Ctrl + W + p</code>：将光标移至前一个窗口（左或上）</li>
<li><code>Ctrl + W + n</code>：将光标移至下一个窗口（右或下）</li>
</ul>
<h3 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a><strong>选项卡管理</strong></h3><h4 id="打开、关闭和列出选项卡"><a href="#打开、关闭和列出选项卡" class="headerlink" title="打开、关闭和列出选项卡"></a><strong>打开、关闭和列出选项卡</strong></h4><ul>
<li><code>:tabnew</code> 或 <code>:tabedit</code>：打开一个包含空缓冲区的选项卡</li>
<li><code>:tabedit foo.txt</code>：打开一个包含文件 <code>foo.txt</code>的新选项卡</li>
<li><code>:qa</code>：关闭当前 Vim 会话中的所有窗口和选项卡（或在退出前使用 <code>:wq</code> 保存更改）</li>
<li><code>:lt</code>：列出当前 Vim 会话中的所有选项卡</li>
</ul>
<h4 id="在选项卡之间移动"><a href="#在选项卡之间移动" class="headerlink" title="在选项卡之间移动"></a><strong>在选项卡之间移动</strong></h4><ul>
<li><code>Ctrl + W + T</code>：将当前窗口移至其自己的选项卡页</li>
<li><code>gT</code>：将光标移至前一个选项卡页（左或上）</li>
<li><code>gt</code>：将光标移至下一个选项卡页（右或下）</li>
</ul>
<h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a><strong>文件操作</strong></h3><h4 id="打开和保存文件"><a href="#打开和保存文件" class="headerlink" title="打开和保存文件"></a><strong>打开和保存文件</strong></h4><ul>
<li><code>:edit foo.txt</code>：打开一个包含文件 <code>foo.txt</code> 的新缓冲区</li>
<li><code>:write</code> 或 <code>:w</code>：将当前缓冲区的内容保存到其关联的文件</li>
<li><code>:qa</code>：退出当前 Vim 会话中的所有窗口和选项卡（或在退出前使用 <code>:wq</code> 保存更改）</li>
</ul>
<h3 id="使用不同文件分割窗口"><a href="#使用不同文件分割窗口" class="headerlink" title="使用不同文件分割窗口"></a><strong>使用不同文件分割窗口</strong></h3><ul>
<li><code>:split foo.txt</code>：打开一个包含文件 <code>foo.txt</code>的新窗口</li>
<li><code>:vsplit bar.txt</code>：打开一个包含文件 <code>bar.txt</code> 的新垂直窗口</li>
</ul>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a><strong>插件安装</strong></h2><p>安装vim-plug插件管理器</p>
<p>在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure>

<p>这条命令会将 vim-plug 下载并安装到 <code>~/.vim/autoload/plug.vim</code> 中。</p>
<p>配置：在你的 <code>~/.vimrc</code>（或 <code>~/.config/nvim/init.vim</code> 如果是 <code>Neovim</code>）文件中添加以下内容来配置 vim-plug：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; vim-plug settings</span></span><br><span class="line"><span class="string">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span></span><br><span class="line"><span class="string">&quot;</span> 插件列表</span><br><span class="line"><span class="string">&quot; 例如：Plug &#x27;junegunn/vim-easy-align&#x27;</span></span><br><span class="line"><span class="string">call plug#end()</span></span><br></pre></td></tr></table></figure>

<p>在 <code>call plug#begin()</code> 和 <code>call plug#end()</code> 之间，列出你想安装的插件。每个插件由 <code>Plug &#39;github用户/仓库&#39;</code> 格式定义。</p>
<p>在Vim运行以下命令安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:PlugInstall</span><br></pre></td></tr></table></figure>

<p><strong>常用插件</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nerdtree：一个在屏幕左侧添加文件树的插件，可以让你更轻松地浏览文件。</span><br><span class="line">Syntastic：一个为多种编程语言提供语法高亮的插件。</span><br><span class="line">Vim-Airline：一个高度可配置的 Vim 状态栏，易于自定义，可提高你的整体编辑效率。</span><br><span class="line">Nerd Commenter：这个插件可以帮助你轻松注释和取消注释各种编程语言中的代码行。</span><br><span class="line">FZF：一个命令行模糊查找器，具有语法高亮、键盘导航和文件过滤功能。</span><br><span class="line">YouCompleteMe：一个适用于 Vim 的快速按需代码补全引擎。</span><br><span class="line">Coc.nvim：一个语言服务器协议 (LSP) 插件，为许多热门编程语言提供 IntelliSense 功能，如自动完成和跳转到定义。</span><br><span class="line">Vim-Fugitive：这个插件允许你轻松地在 Vim 中管理 Git 存储库。</span><br><span class="line">Ale：一个与许多热门编程语言搭配使用的语法和样式检查器，可在键入时提供实时错误检查。</span><br><span class="line">Vim-surround：这个插件让你可以轻松处理文件中的文本周围成对的字符（如引号或括号）。</span><br><span class="line">Lightline：一个轻量级且可配置的 Vim 状态栏/选项卡栏插件。</span><br><span class="line">Vim-easymotion：EasyMotion 提供了一种更简单的方式来使用 vim 中的一些动作。它通过突出显示所有可能的选择并允许你按一个键直接跳转到目标来消除 w 或 f&#123;char&#125; 中的 。</span><br><span class="line">Vim-lsp：一个提供语言服务器协议支持的插件，让你可以使用高级语言特性，如代码补全和语法高亮。</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="line">	Plug &#x27;preservim/nerdtree&#x27;</span><br><span class="line">	Plug &#x27;vim-syntastic/syntastic&#x27;</span><br><span class="line">	Plug &#x27;vim-airline/vim-airline&#x27;</span><br><span class="line">	Plug &#x27;preservim/nerdcommenter&#x27;</span><br><span class="line">	Plug &#x27;ycm-core/YouCompleteMe&#x27;</span><br><span class="line">	Plug &#x27;junegunn/vim-easy-align&#x27;</span><br><span class="line">	Plug &#x27;neoclide/coc.nvim&#x27;, &#123;&#x27;branch&#x27;: &#x27;release&#x27;&#125;</span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>软件使用教程</tag>
      </tags>
  </entry>
  <entry>
    <title>鸟哥的Linux实战阅读笔记</title>
    <url>/2024/08/10/%E9%B8%9F%E5%93%A5%E7%9A%84Linux%E7%A7%81%E6%88%BF%E8%8F%9C%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>[TOC] </p>
<h1 id="一、计算机概论"><a href="#一、计算机概论" class="headerlink" title="一、计算机概论"></a>一、计算机概论</h1><p>计算机：接受输入指令与数据，经由中央处理器的数学与逻辑单元运算处理后，以产生或储存成有用的信息。</p>
<p>计算机由五个主要单元所组成的，包括<strong>输入单元、输出单元、CPU 内部的控制单元、算数逻辑单元与内存</strong>五大部分。</p>
<p>重点在于中央处理器（<code>Central Processing Unit</code>,  CPU），CPU 为一个具有特定功能的芯片，里头含有<strong>微指令集</strong>。</p>
<p>CPU 的工作主要在于<strong>管理与运算</strong>，因此在CPU 内又可分为两个主要的单元：算数逻辑单元与控制单元。</p>
<ul>
<li>算数逻辑单元：主要负责程序运算与逻辑判断</li>
<li>控制单元：协调各周边元件与各单元间的工作。</li>
</ul>
<p>CPU 读取的数据都是从内存来的，内存内的数据则是从输入单元所传输进来！而 CPU 处理完毕的数据也必须要先写回内存中，最后数据才从内存传输到输出单元。</p>
<pre class="mermaid">graph LR
    输入输出设备 --输入--> 内存
    内存 --读取--> CPU
    CPU --传输--> 内存
    内存 --输出--> 输入输出设备</pre>



<span id="more"></span>

<h2 id="CPU-架构"><a href="#CPU-架构" class="headerlink" title="CPU 架构"></a>CPU 架构</h2><p>主要有两种 CPU 架构，分别是：精简指令集（<code>RISC</code>）与复杂指令集（<code>CISC</code>）系统。</p>
<ul>
<li><p>精简指令集（<code>Reduced Instruction Set Computer,</code>  <code>RISC</code>）：这种 CPU 的微指令集较为精简，每个指令的执行时间都很短，完成的动作也很单纯，指令的执行性能较佳；但是若要做复杂的事情，就要由多个指令来完成。.</p>
<blockquote>
<p>常见的 RISC微指令集 CPU :</p>
<p>甲骨文（Oracle）公司的 SPARC 系列，常用于学术领域的大型工作站中和银行金融体系的主要服务器</p>
<p>IBM 公司的 <code>PowerArchitecture</code> （包括 <code>PowerPC</code>）系列，<code>PS3</code>的Cell处理器等</p>
<p>安谋公司（ARM Holdings）的 ARM CPU 系列，手机、<code>PDA</code>、导航系统、网络设备（交换器、路由器等）等</p>
</blockquote>
</li>
<li><p>复杂指令集（<code>Complex Instruction Set Computer</code>, <code>CISC</code>）：与<code>RISC</code>不同的，<code>CISC</code>在微指令集的每个小指令可以执行一些较低阶的硬件操作，指令数目多而且复杂，每条指令的长度并不相同。因为指令执行较为复杂所以每条指令花费的时间较长，但每条个别指令可以处理的工作较为丰富。</p>
<p>常见的<code>CISC</code>微指令集CPU主要有<code>AMD</code>、<code>Intel</code>、<code>VIA</code>等<code>x86</code>架构的CPU。</p>
<blockquote>
<p>为啥叫<code>x86</code>？</p>
<p>因为最早的那颗Intel发展出来的CPU代号称为<strong>8086</strong>，后来依此架构又开发出80286, 80386…，因此这种架构的CPU就被称为<code>x86</code>架构了。在2003年以前由Intel所开发的<code>x86</code>架构CPU由8位升级到16、32位，后来<code>AMD</code>依此架构修改新一代的CPU为64位，为了区别两者的差异，因此64位的CPU又被统称为<code>x86_64</code>的架构</p>
</blockquote>
<blockquote>
<p>所谓的位指的是<strong>CPU一次数据读取的最大量</strong>！64位CPU代表CPU一次可以读写<code>64bits</code>的数据，32位CPU一次只能读取<code>32bits</code>的数据。</p>
<p>因为CPU读取数据量有限制，因此能够从内存中读写的数据也就有所限制。所以，一般32位的CPU所能读写的最大数据量，大概就是<code>4GB</code>左右</p>
</blockquote>
</li>
</ul>
<h3 id="CPU的工作频率"><a href="#CPU的工作频率" class="headerlink" title="CPU的工作频率"></a>CPU的工作频率</h3><p>每秒钟可以执行的时钟周期数，而不是直接表示可以进行多少次工作。频率越高表示CPU单位时间内可以作更多的事情。 </p>
<p>例如：<code>i7-4790</code> CPU频率为<code>3.6GHz</code>，表示每秒钟可以进行3.6 × 10^9 次时钟周期，如果每个时钟周期可以完成一项基本操作，那么理论上每秒钟可以完成3.6 × 10^9 次基本操作.</p>
<h3 id="外频与倍频"><a href="#外频与倍频" class="headerlink" title="外频与倍频"></a>外频与倍频</h3><p>早期的 CPU 架构主要通过<strong>北桥</strong>来链接系统最重要的 <code>CPU、内存与显卡设备</code>。因为所有的设备都得通过北桥来链接，每个设备的工作频率应该要相同，于是就有所谓的前端总线（<code>FSB</code>）。由于 CPU 的运算速度比其他的设备都快，又为了要满足<code>FSB</code> 的频率，因此厂商就在 CPU 内部再进行加速，于是就有所谓的外频与倍频了。</p>
<ul>
<li>外频：CPU与外部元件进行数据传输时的速度</li>
<li>倍频：CPU 内部用来加速工作性能的一个倍数，两者相乘才是CPU的频率速度</li>
</ul>
<p>例如 <code>Intel Core 2 E8400</code> 的内频为 <code>3.0GHz</code>，而外频是<code>333MHz</code>，因此倍频就是9倍！（<code>3.0G = 333M x 9</code>）</p>
<blockquote>
<p>超频的原理？</p>
<p>以前的超频：将CPU的倍频或者是外频通过主板的设置功能更改成较高频率的一种方式。但因为CPU的倍频通常在出厂时已经被锁定而无法修改，因此较常被超频的为<strong>外频</strong>。</p>
<p>目前的<strong>CPU自动超频</strong></p>
<p>CPU自动超频通常是指通过处理器内部的动态频率调整技术，如<code>Intel的Turbo Boost</code>或<code>AMD的Precision Boost</code>，来自动提升处理器的工作频率，以在需要时提供更高的性能</p>
<p>手动超频：</p>
<p>超频需要主板和BIOS的支持。主板的设计和电源供应必须足够强大，同时BIOS提供了设置频率、电压等参数的界面和选项</p>
<p>1、时钟发生器调整</p>
<p>改变时钟发生器的输出频率，使CPU执行的时钟周期增加，从而提高CPU的工作频率</p>
<p>2、电压调整</p>
<p>增加CPU的电压，以确保处理器在更高频率下能够稳定运行</p>
</blockquote>
<p>但如此一来所有的数据都被北桥卡死了，北桥又不可能比 CPU 更快，因此这家伙常常是系统性能的瓶颈。为了解决这个问题，新的 CPU 设计中，已经将<strong>内存控制器</strong>整合到 CPU 内部，而链接 <strong>CPU 与内存、显卡</strong>的控制器的设计，在<code>Intel</code>部份使用 <code>QPI （Quick PathInterconnect）</code>与 <code>DMI</code> 技术，而 <code>AMD</code> 部份则使用 <code>Hyper Transport</code> 了，这些技术都可以让CPU 直接与内存、显卡等设备分别进行沟通，而不需要通过外部的链接芯片了。</p>
<h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>个人电脑的内存主要元件为动态随机存取内存（Dynamic Random Access Memory, DRAM），随机存取内存只有在<strong>通电</strong>时才能记录与使用，断电后数据就消失了。因此也称这种RAM为挥发性内存。</p>
<h3 id="DRAM"><a href="#DRAM" class="headerlink" title="DRAM"></a>DRAM</h3><p><code>DRAM</code>根据技术的更新分好几代，使用上较广泛的是<code>SDRAM</code>与<code>DDR SDRAM</code>两种。这两种内存的差别除了<strong>脚位</strong>与<strong>工作电压</strong>上的不同之外，<code>DDR</code>是双倍数据传送速度（Double Data Rate），可以在一次工作周期中进行两次数据的传送，所以传输频率方面比<code>SDRAM</code>还要好。<code>DDR2</code> 的频率倍数是<code>DDR</code>的 4 倍，而<code>DDR3</code> 则是 8 倍。</p>
<p><code>DDR3/DDR3L</code>：新的制程中降低了内存的操作电压，<code>DDR3</code> 标准电压为 <code>1.5V</code>，但 <code>DDR3L</code> 则仅须 <code>1.35V</code> ，需要主板支持。</p>
<h4 id="内存容量"><a href="#内存容量" class="headerlink" title="内存容量"></a>内存容量</h4><p>内存容量不够大的话将会导致某些<strong>大容量数据</strong>无法被完整的载入，此时已存在内存当中但暂时没有被使用到的数据必须要先被<strong>释放</strong>，使得可用内存容量大于该数据，那份新数据才能够被载入。所以，通常越大的内存代表越快速的系统，这是因为系统不用常常释放一些内存内部的数据。</p>
<h4 id="多通道"><a href="#多通道" class="headerlink" title="多通道"></a>多通道</h4><p>由于所有的数据都必须要存放在内存，所以内存的数据宽度当然是越大越好。但传统的总线宽度一般大约仅达64位，为了加大这个宽度，芯片组厂商将两个内存汇整在一起，如果一支内存可达64位，两支内存就可以达到128位了，这就是双通道的设计理念。启用双通道的功能必须要安插两支（或四支）内存，最好连内存型号都一样，因为数据是同步写入&#x2F;读出这一对内存。</p>
<h4 id="内存信道"><a href="#内存信道" class="headerlink" title="内存信道"></a>内存信道</h4><p>计算机系统中用于传输数据和指令的路径或通道，其作用类似于数据在计算机内存和其他硬件组件（如CPU、显卡等）之间的桥梁。</p>
<h5 id="作用和功能"><a href="#作用和功能" class="headerlink" title="作用和功能"></a>作用和功能</h5><ul>
<li><p><strong>数据传输</strong>：内存信道负责将数据从计算机的主存储器（RAM）传输到其他硬件组件，如<code>CPU</code>、<code>GPU</code>等，或者反之。</p>
</li>
<li><p><strong>并发性</strong>：现代计算机系统通常具有多个内存信道，允许同时进行多条数据传输，以提高整体系统的带宽和效率。</p>
</li>
<li><p><strong>速度匹配</strong>：内存信道的设计要与处理器、系统总线和其他硬件组件的速度匹配，以确保高效的数据交换和处理。</p>
</li>
</ul>
<h3 id="CPU内部高速缓存"><a href="#CPU内部高速缓存" class="headerlink" title="CPU内部高速缓存"></a>CPU内部高速缓存</h3><p>CPU内部高速缓存（CPU Cache）是位于CPU内部的一种高速存储器，用于临时存放<strong>频繁使用</strong>的数据和指令，减少从主存（<code>RAM</code>）读取数据的时间，以提高处理器访问数据的速度和效率。</p>
<p>静态随机存取内存（<code>StaticRandom Access Memory, SRAM</code>）：是一种基于静态存储单元的存储器技术。<code>SRAM</code>主要用于实现高速缓存、寄存器文件和其他需要快速访问的存储器部件，包括但不限于CPU内部缓存。</p>
<h4 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h4><p><strong>三级缓存</strong>：现代CPU通常包含多层级别的高速缓存，包括 <code>L1</code>（一级缓存）、<code>L2</code>（二级缓存）和<code>L3</code>（三级缓存）。</p>
<ul>
<li>**<code>L1 Cache</code>**：位于CPU核心内部，速度最快，但容量较小。</li>
<li>**<code>L2 Cache</code>**：通常位于CPU核心之间或者与核心紧密结合，速度次于<code>L1</code>，容量比<code>L1</code>大。</li>
<li>**<code>L3 Cache</code>**：位于处理器芯片上，用于共享所有CPU核心之间的数据，速度比<code>L2</code>和<code>L1</code>略慢，但容量最大。</li>
</ul>
<h4 id="命中和失效"><a href="#命中和失效" class="headerlink" title="命中和失效"></a>命中和失效</h4><ul>
<li><p><strong>缓存命中（Cache Hit）</strong>：当处理器需要访问数据时，如果数据恰好在缓存中，则可以直接从缓存中读取，这称为缓存命中。</p>
</li>
<li><p><strong>缓存失效（Cache Miss）</strong>：如果需要的数据不在缓存中，则发生缓存失效，处理器必须从主存中读取数据，并将其存入缓存，以备将来使用。</p>
</li>
</ul>
<h3 id="ROM（Read-Only-Memory，只读存储器）"><a href="#ROM（Read-Only-Memory，只读存储器）" class="headerlink" title="ROM（Read-Only Memory，只读存储器）"></a>ROM（Read-Only Memory，只读存储器）</h3><p>一种计算机存储器类型，主要特点是一旦数据被存储在其中，就无法直接修改或写入新的数据。这使得<code>ROM</code>适合存储那些不需要经常更改的固定数据，例如系统固件、基本输入输出系统（BIOS）、引导程序等</p>
<p><strong>种类和应用</strong>：</p>
<ul>
<li><strong><code>EPROM</code>（可擦除可编程ROM）</strong>：<code>EPROM</code>可以通过特定的擦除设备进行擦除和重新编程，但通常需要专业的设备，不适合常规用户。</li>
<li><strong><code>EEPROM</code>（电可擦除可编程ROM）</strong>：<code>EEPROM</code>相对更容易擦除和重新编程，可以通过特定的电压信号来实现擦除操作。</li>
<li><strong><code>Flash</code>存储器</strong>：<code>Flash</code>存储器是一种基于<code>EEPROM</code>技术的可编程存储器，适合大容量数据存储和固件更新。</li>
</ul>
<h2 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h2><p>显卡又称为VGA（<code>Video Graphics Array</code>），用于图形影像的显示。</p>
<p>一般对于图形影像的显示重点在于分辨率与色彩深度，每个图像显示的颜色会占用掉内存，显卡上面会有一个内存的容量，这个显存容量会影响屏幕分辨率与色彩深度。</p>
<p>除了显存之外，显卡的运算能力也很重要。一些<code>3D</code>的运算早期是交给CPU去运行的，但是CPU并非完全针对这些<code>3D</code>来进行设计的，而且CPU平时已经非常忙碌了！所以显卡厂商直接在显卡上面嵌入一个<code>3D</code>加速的芯片，这就是所谓的<code>GPU</code>称谓的由来。</p>
<h3 id="PCIe"><a href="#PCIe" class="headerlink" title="PCIe"></a><code>PCIe</code></h3><p><code>PCIe</code>（Peripheral Component Interconnect Express，外设组件互联扩展）是一种用于连接高速外设和主板的计算机总线标准，使用的是类似管线的概念来处理，在 <code>PCIe 1.0</code>中，每条管线可以具有<code>250MBytes/s</code>的带宽性能，管线越多（通常设计到 <code>x16</code>管线）则总带宽越高。</p>
<table>
<thead>
<tr>
<th>规格</th>
<th>1x带宽</th>
<th>16x带宽</th>
<th>速度</th>
</tr>
</thead>
<tbody><tr>
<td>PCIe 1.0</td>
<td>250MB&#x2F;s</td>
<td>4GB&#x2F;s</td>
<td>2.5 GT&#x2F;s</td>
</tr>
<tr>
<td>PCIe 2.0</td>
<td>500MB&#x2F;s</td>
<td>8GB&#x2F;s</td>
<td>5 GT&#x2F;s</td>
</tr>
<tr>
<td>PCIe 3.0</td>
<td>1GB&#x2F;s</td>
<td>16GB&#x2F;s</td>
<td>8 GT&#x2F;s</td>
</tr>
<tr>
<td>PCIe 4.0</td>
<td>2GB&#x2F;s</td>
<td>32GB&#x2F;s</td>
<td>16 GT&#x2F;s</td>
</tr>
<tr>
<td>PCIe 5.0</td>
<td>4GB&#x2F;s</td>
<td>64GB&#x2F;s</td>
<td>32 GT&#x2F;s</td>
</tr>
</tbody></table>
<h2 id="硬盘和储存设备"><a href="#硬盘和储存设备" class="headerlink" title="硬盘和储存设备"></a>硬盘和储存设备</h2><p>硬盘（Hard Disk Drive，HDD）是一种用于存储数据的计算机存储设备，它由多个磁性盘片（通常为金属或玻璃材料制成）组成，盘片上覆盖有磁性材料，用来存储数据。</p>
<h4 id="结构和工作原理"><a href="#结构和工作原理" class="headerlink" title="结构和工作原理"></a>结构和工作原理</h4><h5 id="磁盘和磁头"><a href="#磁盘和磁头" class="headerlink" title="磁盘和磁头"></a><strong>磁盘和磁头</strong></h5><ul>
<li><strong>磁盘片</strong>：硬盘内部有一个或多个磁盘片，通常是金属或玻璃材料制成，表面上有一层磁性材料。</li>
<li><strong>磁头</strong>：每个磁盘片的两面都有读写磁头，负责在盘片表面上读取和写入数据。</li>
</ul>
<h5 id="数据存储原理："><a href="#数据存储原理：" class="headerlink" title="数据存储原理："></a><strong>数据存储原理</strong>：</h5><ul>
<li><strong>磁性记录</strong>：硬盘通过在磁盘片表面创建的磁性颗粒来记录数据。这些颗粒在磁场的作用下会根据磁性状况的不同，存储0和1的数据。</li>
</ul>
<h5 id="工作过程："><a href="#工作过程：" class="headerlink" title="工作过程："></a><strong>工作过程</strong>：</h5><ul>
<li><strong>读取数据</strong>：当计算机需要读取硬盘上的数据时，磁头会定位到相应的磁道（一个圆形的路径），并读取相应的磁性颗粒上的数据。</li>
<li><strong>写入数据</strong>：写入数据时，磁头会通过改变磁性颗粒的磁性状态来记录新的数据</li>
</ul>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="传统硬盘驱动器（HDD）："><a href="#传统硬盘驱动器（HDD）：" class="headerlink" title="传统硬盘驱动器（HDD）："></a><strong>传统硬盘驱动器（HDD）</strong>：</h5><ul>
<li><strong>机械结构</strong>：传统HDD内部有机械运动部件，如旋转的磁盘片和移动的读写磁头。</li>
<li><strong>容量</strong>：通常具有较大的存储容量，目前主流产品容量从几百GB到数TB不等。</li>
<li><strong>成本</strong>：相对于其他存储设备（如固态硬盘），传统HDD通常价格更低。</li>
</ul>
<h5 id="固态硬盘（SSD）："><a href="#固态硬盘（SSD）：" class="headerlink" title="固态硬盘（SSD）："></a><strong>固态硬盘（SSD）</strong>：</h5><ul>
<li><strong>基于闪存技术</strong>：SSD使用闪存芯片而非机械部件来存储数据，因此没有机械运动，速度更快。</li>
<li><strong>速度</strong>：读写速度比传统HDD快得多，适合需要快速访问数据的应用。</li>
<li><strong>耐用性</strong>：由于没有移动部件，SSD通常比传统HDD更耐用，对震动和冲击更具抵抗力</li>
</ul>
<h4 id="数据存储和访问的物理结构"><a href="#数据存储和访问的物理结构" class="headerlink" title="数据存储和访问的物理结构"></a>数据存储和访问的物理结构</h4><h5 id="扇区（Sector）"><a href="#扇区（Sector）" class="headerlink" title="扇区（Sector）"></a>扇区（Sector）</h5><ul>
<li><strong>定义</strong>：扇区是硬盘上最小的物理数据存储单元。每个扇区可以存储固定大小的数据块。</li>
<li><strong>大小</strong>：传统硬盘通常的扇区大小为512字节或4KB（4096字节）。SSD的扇区大小可能会有所不同，通常为4KB或更大。</li>
<li><strong>作用</strong>：操作系统和硬件使用扇区来读取和写入数据，扇区的大小决定了硬盘能够存储和处理的最小数据单位。</li>
</ul>
<h5 id="磁道（Track）"><a href="#磁道（Track）" class="headerlink" title="磁道（Track）"></a>磁道（Track）</h5><ul>
<li><strong>定义</strong>：磁道是硬盘盘片表面上的一个圆形轨道，沿着盘片的半径方向布置。</li>
<li><strong>结构</strong>：硬盘通常有多个磁道，每个磁道被划分为多个扇区。同一个磁道上的扇区具有相同的物理距离，这有助于保持读写数据的稳定性和一致性。</li>
<li><strong>作用</strong>：磁道用于组织和管理硬盘上的数据，操作系统可以通过磁头在磁道上的移动来访问不同扇区中的数据。</li>
</ul>
<h5 id="柱面（Cylinder）"><a href="#柱面（Cylinder）" class="headerlink" title="柱面（Cylinder）"></a>柱面（Cylinder）</h5><ul>
<li><strong>定义</strong>：柱面是所有盘片上相同半径位置的磁道的集合体。换句话说，所有盘片上垂直于盘片表面的磁道构成一个柱面。</li>
<li><strong>结构</strong>：硬盘通常有多个盘片，每个盘片上有多个磁道，多个盘片上对应的磁道构成一个柱面。例如，第一个磁头上的第一个磁道，第二磁头上的第一个磁道等等。</li>
<li><strong>作用</strong>：操作系统使用柱面来组织和优化磁头的访问顺序，通过在同一柱面上的不同磁头移动，可以快速访问多个盘片上的数据。</li>
</ul>
<h5 id="物理布局和优化"><a href="#物理布局和优化" class="headerlink" title="物理布局和优化"></a>物理布局和优化</h5><ul>
<li><strong>寻道</strong>：硬盘读取数据时，磁头必须移动到正确的磁道上，这个过程称为寻道。</li>
<li><strong>扇区间隙和同步</strong>：相邻扇区之间通常有间隙和同步字段，用于确保数据的正确读取和写入。</li>
<li><strong>数据组织</strong>：操作系统和硬件通过优化磁道和柱面的访问顺序来最大化硬盘的性能和效率。</li>
</ul>
<h4 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h4><h5 id="MBR（Master-Boot-Record）"><a href="#MBR（Master-Boot-Record）" class="headerlink" title="MBR（Master Boot Record）"></a>MBR（Master Boot Record）</h5><p>传统的分区方案和引导加载程序，用于BIOS（Basic Input&#x2F;Output System）和早期UEFI系统</p>
<ul>
<li>限制：MBR支持的最大磁盘容量为2TB（2^32个扇区），最多支持 4个主分区 或者 3个主分区 和 1个扩展分区</li>
<li>结构：MBR存储在硬盘的第一个扇区（通常是512字节），包括分区表（Partition Table）（64字节）和引导加载程序（Bootloader）</li>
<li>主分区是MBR分区方案中的基本分区类型，最多支持4个主分区</li>
<li>扩展分区是一种特殊的主分区，用于扩展MBR分区方案的分区数量限制</li>
</ul>
<p>有三种类型的分区</p>
<ul>
<li>主分区（Primary Partition）<ul>
<li>MBR分区方案中的基本分区类型，最多支持4个主分区</li>
<li>每个主分区可以包含一个操作系统或数据</li>
<li>可以直接被操作系统识别和引导</li>
<li>每个主分区被描述为一个分区条目，占据分区表的一个条目</li>
</ul>
</li>
<li>扩展分区（Extended Partition）<ul>
<li>一种特殊的主分区，用于扩展MBR分区方案的分区数量限制</li>
<li>只能有一个扩展分区，可以包含多个逻辑分区</li>
<li>本身并不存储文件数据，它仅用于存放其他逻辑分区的信息</li>
</ul>
</li>
<li>逻辑分区<ul>
<li>逻辑分区是存在于扩展分区内的分区，用于克服主分区数量限制</li>
<li>通常用于存储数据，不能直接被操作系统引导</li>
<li>逻辑分区的数量没有明确的限制，只受扩展分区的容量限制</li>
</ul>
</li>
</ul>
<h5 id="GPT（GUID-Partition-Table）"><a href="#GPT（GUID-Partition-Table）" class="headerlink" title="GPT（GUID Partition Table）"></a>GPT（GUID Partition Table）</h5><p>一种现代的分区方案和引导加载程序，设计用于替代 MBR，并广泛支持UEFI（Unified Extensible Firmware Interface）系统</p>
<ul>
<li>容量：GPT支持更大的硬盘容量，最多可达到约8ZB（2^64个扇区，1ZB &#x3D; 230TB）</li>
<li>分区数量：GPT支持128个分区条目，每个分区条目可以是主分区或逻辑分区，且没有主扩展分区的限制</li>
<li>结构：GPT在硬盘的起始位置（通常是第一个扇区）存储主要GPT头（Primary GPT Header）和GPT备份表（Backup GPT Header and Partition Table），这些信息在硬盘上多个位置进行存储，提供了容错性</li>
</ul>
<blockquote>
<p>使用 lscpu 或 cat &#x2F;proc&#x2F;cpuinfo 或 lspci 查看主板各元件信息</p>
</blockquote>
<h1 id="二、Linux学习"><a href="#二、Linux学习" class="headerlink" title="二、Linux学习"></a>二、Linux学习</h1><p>Linux的核心原型是1991年由托瓦兹（Linus Torvalds）写出来的。</p>
<p>Linux的核心版本编号如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看内核版本</span></span><br><span class="line">$ <span class="built_in">uname</span> -r</span><br><span class="line">4.18.0-348.7.1.el8_5.x86_64</span><br><span class="line"><span class="comment"># 各参数说明</span></span><br><span class="line">主版本号（Linux内核的主要版本号）：4</span><br><span class="line">次版本号（内核的次要版本更新）：18</span><br><span class="line">修订版本号（对次版本的小的修正和错误修复）：0</span><br><span class="line">内核编译号（Linux内核编译时的唯一标识）：348</span><br><span class="line">ABI（Application Binary Interface）变化序号（内核与用户空间之间的接口是否发生了变化）：7</span><br><span class="line">发布序号（用于指示特定版本的修订或维护更新）：1</span><br><span class="line">发行标签（表示此内核是为特定的Linux发行版编译的）：el8_5（适用于RHEL 8.5（Red Hat Enterprise Linux 8.5）发行版）</span><br><span class="line">处理器架构（内核编译的目标处理器架构）：x86_64</span><br></pre></td></tr></table></figure>

<p>在Linux系统中，<strong>万物皆为文件</strong></p>
<blockquote>
<p> 比如：SATA接口的硬盘的文件名称即为&#x2F;dev&#x2F;sd[a-d]</p>
</blockquote>
<h2 id="目录树结构"><a href="#目录树结构" class="headerlink" title="目录树结构"></a>目录树结构</h2><p>所谓的目录树结构（directory tree），就是以根目录为主，然后向下呈现分支状的目录结构的一种文件架构。整个目录树架构最重要的就是那个根目录（root directory），用 <code>/</code> 表示，所有的文件都与目录树有关。</p>
<pre class="mermaid">graph TD;
    / --> /etc
    / --> /bin
    / --> /home
    / --> /usr
    / --> ...
    /home --> /www
    /home --> /test
    /test --> 1> 1.txt]
    /test --> 2> 2.txt]</pre>

<h2 id="挂载（文件系统与目录树的关系）"><a href="#挂载（文件系统与目录树的关系）" class="headerlink" title="挂载（文件系统与目录树的关系）"></a>挂载（文件系统与目录树的关系）</h2><p>利用一个目录（挂载点）当成进入点，将磁盘分区的数据放置在该目录下，即进入该目录就可以读取该分区的意思</p>
<blockquote>
<p>如何判断某个文件在哪个partition下</p>
<ul>
<li><p>使用 <code>df</code> 命令</p>
<p>df -h &#x2F;path&#x2F;to&#x2F;your&#x2F;file</p>
</li>
<li><p>使用findmnt命令</p>
<p>findmnt -n -o SOURCE –target &#x2F;path&#x2F;to&#x2F;your&#x2F;file</p>
</li>
<li><p>stat命令</p>
<p>stat -c %D &#x2F;path&#x2F;to&#x2F;your&#x2F;file</p>
</li>
<li><p>通过 <code>/proc</code> 文件系统查看</p>
<p>grep &#x2F;path&#x2F;to&#x2F;your&#x2F;file &#x2F;proc&#x2F;mounts</p>
</li>
</ul>
</blockquote>
<h2 id="Linux系统安装"><a href="#Linux系统安装" class="headerlink" title="Linux系统安装"></a>Linux系统安装</h2><p>以CentOS7为例</p>
<ul>
<li>烧录镜像到到 U盘</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># USB 设备为 /dev/sdc</span></span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=centos7.iso of=/dev/sdc</span><br></pre></td></tr></table></figure>

<ul>
<li>进入BIOS（一般是重启后狂按<code>del</code>或<code>F2</code>）</li>
<li>关闭安全启动</li>
<li>调整开机启动速度，将U盘调整到第一优先开机，F10保存并退出</li>
<li>安装Linux系统（这块后面补充）</li>
</ul>
<blockquote>
<p>关于<code>swap</code>分区：</p>
<p>内存交换空间的功能是：当有数据被存放在内存里面，但又不是常被CPU所取用时，那么这些不常被使用的程序将会被丢到硬盘的swap交换空间当中，将内存空间释放出来给真正需要的程序使用！目前机器内存都比较大，所以一般分配 swap 1-2G足够。</p>
</blockquote>
<h3 id="Kickstart-配置文件"><a href="#Kickstart-配置文件" class="headerlink" title="Kickstart 配置文件"></a>Kickstart 配置文件</h3><p>Kickstart 是 Red Hat 系统上用于自动化安装的一种方法，允许用户定义安装过程中的各种参数和配置选项，从而实现无人值守安装。</p>
<p><code>/root/anaconda-ks.cfg</code> 文件是 Anaconda 安装程序使用的 Kickstart 配置文件。在 Linux 系统中，特别是在基于 Red Hat 的发行版（如 CentOS、Fedora）中，Anaconda 是用于系统安装的图形化和文本界面安装程序。</p>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul>
<li><p><strong>自动化安装</strong>：通过定义 Kickstart 文件，可以指定安装过程中需要的各种配置选项，如分区设置、软件包选择、网络配置、用户账号等。</p>
</li>
<li><p><strong>批量部署</strong>：Kickstart 文件可以用于批量部署多台机器，确保所有安装过程的配置和参数一致。</p>
</li>
<li><p><strong>简化配置</strong>：避免手动输入和配置，尤其是在大规模部署和测试环境中，可以大大提高效率和减少错误。</p>
</li>
</ul>
<h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ul>
<li>准备 Kickstart 文件，如<code>/root/anaconda-ks.cfg</code> </li>
<li>准备安装介质，如U盘</li>
<li>重启进入引导界面</li>
<li>输入 <code>linux ks=hd:sda1/anaconda-ks.cfg</code>后回车，假设 Kickstart 文件在 sda1 分区上的根目录下</li>
</ul>
<blockquote>
<p> 登陆成功后终端显示如下，其中<code>test</code>表示目前使用者的账号，@之后接的 <code>172-12-0-1</code>是主机名称，<code>~</code>指当前目录（在这里 ~ 等同于 &#x2F;home&#x2F;test），<code>$</code>是提示字符（root用户是#，普通用户是$）</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root用户</span></span><br><span class="line">[root@172-12-0-1 ~]#</span><br><span class="line"><span class="comment"># 一般用户</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$</span><br></pre></td></tr></table></figure>

<p>登出系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登出当前的终端会话，不是关机</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 效果同exit</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">logout</span></span><br><span class="line"><span class="comment"># 使用Ctrl + D组合键</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制关闭指定用户的所有会话，可能需要管理员权限</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ pkill -KILL -u &lt;username&gt;</span><br></pre></td></tr></table></figure>

<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">command</span>  [-options]  parameter1  parameter2 ...</span><br><span class="line"><span class="comment">#						指令		选项		  参数（1）	   参数（2）</span></span><br></pre></td></tr></table></figure>

<ul>
<li>command: 可以是指令或可执行文件</li>
<li>中刮号<code>[]</code>里边是可选的指令，比如 <code>-h</code> 或者 <code>--help</code>（完整全名需要使用 <code>--</code>）</li>
<li>指令太长的时候，可以使用反斜线（<code>\</code>）来换行</li>
<li>指令大小写含义是不同的</li>
</ul>
<h2 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前日期和时间</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">date</span></span><br><span class="line"><span class="comment"># 格式化为 yyyy/MM/dd 格式</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">date</span> +%Y/%m/%d</span><br><span class="line"><span class="comment"># 格式化为 HH:mm:ss格式</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">date</span> +%H:%M:%S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示日历</span></span><br><span class="line"><span class="comment"># cal [month] [year]</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ cal</span><br><span class="line"><span class="comment"># 显示一年的日历</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ cal 2024</span><br><span class="line"><span class="comment"># 显示某一年某一月的日历</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ cal 8 2024</span><br></pre></td></tr></table></figure>

<h2 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ locale</span><br><span class="line"><span class="comment"># 语言语系的输出</span></span><br><span class="line">LANG=zh_CN.UTF-8</span><br><span class="line"><span class="comment"># 下面为许多信息的输出使用的特别语系</span></span><br><span class="line">LC_CTYPE=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line">LC_NUMERIC=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line"><span class="comment"># 时间方面的语系数据</span></span><br><span class="line">LC_TIME=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line">LC_COLLATE=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 全部的数据同步更新的设置值</span></span><br><span class="line">LC_ALL=</span><br></pre></td></tr></table></figure>

<h3 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时修改为英文（exit后失效）</span></span><br><span class="line"><span class="comment"># LANG 只与输出讯息有关，若需要更改其他不同的信息，要同步更新 LC_ALL 才行</span></span><br><span class="line"><span class="comment"># 等号两边没有空白字符</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ LANG=en_US.utf8</span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">export</span> LC_ALL=en_US.utf8</span><br></pre></td></tr></table></figure>

<h2 id="计算器：bc"><a href="#计算器：bc" class="headerlink" title="计算器：bc"></a>计算器：bc</h2><ul>
<li><p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确认是否安装</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ bc --version</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">sudo</span> yum install -y bc</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
<ul>
<li><p>基础计算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">echo</span> <span class="string">&quot;2 + 3&quot;</span> | bc</span><br></pre></td></tr></table></figure>
</li>
<li><p>浮点数计算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要设置小数点的精度scale</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">echo</span> <span class="string">&quot;scale=2; 5 / 3&quot;</span> | bc</span><br></pre></td></tr></table></figure>
</li>
<li><p>变量和表达式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">echo</span> <span class="string">&quot;a=5; b=3; a * b&quot;</span> | bc</span><br></pre></td></tr></table></figure>
</li>
<li><p>函数和计算</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">echo</span> <span class="string">&quot;scale=2; sqrt(16)&quot;</span> | bc</span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">echo</span> <span class="string">&quot;scale=2; 2^3&quot;</span> | bc</span><br></pre></td></tr></table></figure>
</li>
<li><p>从文件读取表达式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">echo</span> <span class="string">&quot;3 + 4&quot;</span> &gt; calc.txt</span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ bc &lt; calc.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>交互式模式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ bc</span><br><span class="line"><span class="comment"># ENTER</span></span><br><span class="line">scale=3</span><br><span class="line">22 / 7</span><br></pre></td></tr></table></figure>
</li>
<li><p>启用数学库，使用 <code>-l</code> 选项启用数学库，提供更多函数支持（如对数、三角函数等）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算 10 的自然对数</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">echo</span> <span class="string">&quot;scale=2; l(10)&quot;</span> | bc -l</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>退出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ quit</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tab代码补全"><a href="#Tab代码补全" class="headerlink" title="Tab代码补全"></a>Tab代码补全</h2><h3 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果d有多个，显示所有d开头的指令，同样适用于文件补全</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ d[Tab][Tab]</span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">ls</span> -al ~/.bash[tab][tab]</span><br><span class="line"><span class="comment"># 如果da开头指令只有一个，自动补全</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ da[Tab]</span><br></pre></td></tr></table></figure>

<h3 id="参数-选项补齐"><a href="#参数-选项补齐" class="headerlink" title="参数&#x2F;选项补齐"></a>参数&#x2F;选项补齐</h3><ul>
<li><p>安装<code>bash-completion</code>软件，只适用于 <code>bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">sudo</span> yum install -y bash-completion</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">date</span> --[Tab][Tab]</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果验证不生效，启用 <code>bash-completion</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开 ~/.bashrc 文件，这里使用vim</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">sudo</span> vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加以下行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Enable bash completion</span><br><span class="line">if [ -f /etc/profile.d/bash_completion.sh ]; then</span><br><span class="line">    . /etc/profile.d/bash_completion.sh</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>重新加载配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 ~]$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="向前向后翻页"><a href="#向前向后翻页" class="headerlink" title="向前向后翻页"></a>向前向后翻页</h2><ul>
<li><p>向前：Shift + PageUp</p>
</li>
<li><p>向后：Shift + PageDown</p>
</li>
</ul>
<h2 id="命令帮助文档"><a href="#命令帮助文档" class="headerlink" title="命令帮助文档"></a>命令帮助文档</h2><h3 id="指令的help求助"><a href="#指令的help求助" class="headerlink" title="指令的help求助"></a>指令的help求助</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 <span class="built_in">test</span>]$ <span class="built_in">date</span> --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">用法：<span class="built_in">date</span> [选项]... [+格式]	<span class="comment"># 基本语法</span></span><br><span class="line">　或：<span class="built_in">date</span> [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]	<span class="comment"># 设置时间的语法</span></span><br><span class="line">Display the current time <span class="keyword">in</span> the given FORMAT, or <span class="built_in">set</span> the system <span class="built_in">date</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是主要的选项说明</span></span><br><span class="line">必选参数对长短选项同时适用。</span><br><span class="line">  -d, --<span class="built_in">date</span>=STRING          display time described by STRING, not <span class="string">&#x27;now&#x27;</span></span><br><span class="line">      --debug                annotate the parsed <span class="built_in">date</span>,</span><br><span class="line">                              and warn about questionable usage to stderr</span><br><span class="line">  -f, --file=DATEFILE        like --<span class="built_in">date</span>; once <span class="keyword">for</span> each line of DATEFILE</span><br><span class="line">  ...</span><br><span class="line">  -u, --utc, --universal     <span class="built_in">print</span> or <span class="built_in">set</span> Coordinated Universal Time (UTC)</span><br><span class="line">      --<span class="built_in">help</span>		显示此帮助信息并退出</span><br><span class="line">      --version		显示版本信息并退出</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是格式化（FORMAT）的主要项目</span></span><br><span class="line">给定的格式FORMAT 控制着输出，解释序列如下：</span><br><span class="line"></span><br><span class="line">  %%	一个文字的 %</span><br><span class="line">  %a	当前locale 的星期名缩写(例如： 日，代表星期日)</span><br><span class="line">  %A	当前locale 的星期名全称 (如：星期日)</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是几个重要的范例（Example）</span></span><br><span class="line">Examples:</span><br><span class="line">Convert seconds since the epoch (1970-01-01 UTC) to a <span class="built_in">date</span></span><br><span class="line">  $ <span class="built_in">date</span> --<span class="built_in">date</span>=<span class="string">&#x27;@2147483647&#x27;</span></span><br><span class="line"></span><br><span class="line">Show the time on the west coast of the US (use tzselect(1) to find TZ)</span><br><span class="line">  $ TZ=<span class="string">&#x27;America/Los_Angeles&#x27;</span> <span class="built_in">date</span></span><br><span class="line"></span><br><span class="line">Show the <span class="built_in">local</span> time <span class="keyword">for</span> 9AM next Friday on the west coast of the US</span><br><span class="line">  $ <span class="built_in">date</span> --<span class="built_in">date</span>=<span class="string">&#x27;TZ=&quot;America/Los_Angeles&quot; 09:00 next Fri&#x27;</span></span><br><span class="line"></span><br><span class="line">GNU coreutils 在线帮助：&lt;https://www.gnu.org/software/coreutils/&gt;</span><br><span class="line">请向 &lt;http://translationproject.org/team/zh_CN.html&gt; 报告 <span class="built_in">date</span> 的翻译错误</span><br><span class="line">完整文档请见：&lt;https://www.gnu.org/software/coreutils/date&gt;</span><br><span class="line">或者在本地使用：info <span class="string">&#x27;(coreutils) date invocation&#x27;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>通常 –help 用在协助你查询“你曾经用过的指令所具备的选项与参数”而已，如果你要使用的是从来没有用过得指令，或者是你要查询的根本就不是指令，而是<code>文件的格式</code>时，那就得要通过 man page </p>
</blockquote>
<h3 id="man-page"><a href="#man-page" class="headerlink" title="man page"></a>man page</h3><p>man是<code>manual</code>（操作说明）的简写，man page的数据通常放在<code>/usr/share/man/</code>下（可以在<code>/etc/man_db.conf</code> 配置）</p>
<ul>
<li>常用按键操作</li>
</ul>
<table>
<thead>
<tr>
<th>按键</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>Enter</td>
<td>显示下一行</td>
</tr>
<tr>
<td>空格 &#x2F; Page Down</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>Page Up</td>
<td>向上翻一页</td>
</tr>
<tr>
<td>Home</td>
<td>回到首页</td>
</tr>
<tr>
<td>End</td>
<td>去到尾页</td>
</tr>
<tr>
<td>&#x2F;string</td>
<td>向下搜索字符串string</td>
</tr>
<tr>
<td>?string</td>
<td>向上搜索字符串string</td>
</tr>
<tr>
<td>n</td>
<td>向下搜索</td>
</tr>
<tr>
<td>N</td>
<td>向上搜索</td>
</tr>
<tr>
<td>q</td>
<td>退出man page</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">test</span>@172-12-0-1 <span class="built_in">test</span>]$ man <span class="built_in">date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请注意上面这个括号内的数字</span></span><br><span class="line">DATE(1)                  			User Commands              				    DATE(1)</span><br><span class="line"><span class="comment"># 这个指令的完整全名，如下所示为date且说明简单用途为设置与显示日期/时间</span></span><br><span class="line">NAME</span><br><span class="line">       <span class="built_in">date</span> - <span class="built_in">print</span> or <span class="built_in">set</span> the system <span class="built_in">date</span> and time</span><br><span class="line"><span class="comment"># 这个指令的基本语法如下所示</span></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="built_in">date</span> [OPTION]... [+FORMAT]</span><br><span class="line">       <span class="built_in">date</span> [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br><span class="line"><span class="comment"># 详细说明刚刚语法谈到的选项与参数的用法</span></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Display the current time <span class="keyword">in</span> the given FORMAT, or <span class="built_in">set</span> the system <span class="built_in">date</span>.</span><br><span class="line"></span><br><span class="line">       Mandatory arguments to long options are mandatory <span class="keyword">for</span> short options too.</span><br><span class="line"></span><br><span class="line">       -d, --<span class="built_in">date</span>=STRING</span><br><span class="line">              display time described by STRING, not <span class="string">&#x27;now&#x27;</span></span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">       --version</span><br><span class="line">              output version information and <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出的详细数据</span></span><br><span class="line">       FORMAT controls the output.  Interpreted sequences are:</span><br><span class="line"></span><br><span class="line">       %%     a literal %</span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">       %Z     alphabetic time zone abbreviation (e.g., EDT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">EXAMPLES</span><br><span class="line">       Convert seconds since the epoch (1970-01-01 UTC) to a <span class="built_in">date</span></span><br><span class="line"></span><br><span class="line">              $ <span class="built_in">date</span> --<span class="built_in">date</span>=<span class="string">&#x27;@2147483647&#x27;</span></span><br><span class="line"></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># date 的格式说明</span></span><br><span class="line">DATE STRING</span><br><span class="line">       The --<span class="built_in">date</span>=STRING is a mostly free format human readable <span class="built_in">date</span> string such as <span class="string">&quot;Sun, 29 Feb 2004 16:21:42 -0800&quot;</span> or <span class="string">&quot;2004-02-29 16:21:42&quot;</span> or even <span class="string">&quot;next Thursday&quot;</span>.  A <span class="built_in">date</span> string may contain items indicating calendar  <span class="built_in">date</span>,  time  of</span><br><span class="line">       day, time zone, day of week, relative time, relative <span class="built_in">date</span>, and numbers.  An empty string indicates the beginning of the day.  The <span class="built_in">date</span> string format is more complex than is easily documented here but is fully described <span class="keyword">in</span> the info</span><br><span class="line">       documentation.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与这个指令相关的环境参数说明</span></span><br><span class="line">ENVIRONMENT</span><br><span class="line">       TZ     Specifies the timezone, unless overridden by <span class="built_in">command</span> line parameters.  If neither is specified, the setting from /etc/localtime is used.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以从哪里查到与date相关的说明文档</span></span><br><span class="line">SEE ALSO</span><br><span class="line">       Full documentation at: &lt;https://www.gnu.org/software/coreutils/date&gt;</span><br><span class="line">       or available locally via: info <span class="string">&#x27;(coreutils) date invocation&#x27;</span></span><br><span class="line"></span><br><span class="line">GNU coreutils 8.30                       July 2018       				          DATE(1)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上面第一行出现的<code>DATE(1)</code>是什么意思呢</p>
<p>使用 <code>man man</code> 可以查看更多信息</p>
<table>
<thead>
<tr>
<th>代号</th>
<th>代表内容</th>
<th>重要</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>使用者在shell环境中可以操作的指令或可可执行文件</td>
<td>Y</td>
</tr>
<tr>
<td>2</td>
<td>系统核心可调用的函数与工具等</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>一些常用的函数（function）与函数库（library），大部分为C的函数库（libc）</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>设备文件的说明，通常在&#x2F;dev下的文件</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>配置文件或者是某些文件的格式</td>
<td>Y</td>
</tr>
<tr>
<td>6</td>
<td>游戏（games）</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>惯例与协定等，例如Linux文件系统、网络协定、ASCII code等等的说明</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>系统管理员可用的管理指令</td>
<td>Y</td>
</tr>
<tr>
<td>9</td>
<td>跟kernel有关的文件</td>
<td></td>
</tr>
</tbody></table>
</blockquote>
<h4 id="搜寻特定指令-文件的man-page说明文档"><a href="#搜寻特定指令-文件的man-page说明文档" class="headerlink" title="搜寻特定指令&#x2F;文件的man page说明文档"></a>搜寻特定指令&#x2F;文件的man page说明文档</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 -f 这个选项就可以取得更多与man相关的信息</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ man -f info</span><br><span class="line">info (5)             - readable online documentation</span><br><span class="line">info (1)             - <span class="built_in">read</span> Info documents</span><br><span class="line"><span class="comment"># 等同于 whatis [指令或数据]，如果使用不了，可以切换root用户执行 mandb</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ mandb</span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ whatis info</span><br><span class="line"></span><br><span class="line"><span class="comment"># man info会使用哪个说明文档，跟/etc/man_db.conf配置的顺序有关，通常会使用数字小的</span></span><br><span class="line"><span class="comment"># 也可以手动去指定</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ man 1 info</span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ man 5 info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出系统说明文档中包含某个字符串的文件</span></span><br><span class="line"><span class="comment"># man -k string</span></span><br><span class="line"><span class="comment"># 等同于 apropos [指令或数据]</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ man -k info</span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ apropos info</span><br></pre></td></tr></table></figure>

<h3 id="info-page"><a href="#info-page" class="headerlink" title="info page"></a>info page</h3><ol>
<li><p>与 <code>man page</code> 一次性输出一堆信息不同，<code>info page</code> 是将文件数据拆成一个一个的段落，每个段落用自己的页面来撰写，并且在各个页面中还有类似网页的“超链接”来跳到各不同的页面中，每个独立的页面也被称为一个节点（node）</p>
</li>
<li><p>支持info指令的文件放置在<code>/usr/share/info/</code>目录中。</p>
</li>
<li><p>查询的指令说明要具有info page功能的话，得用info page的格式来写成线上求助文件才行，否则展示效果同man page</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td>N</td>
<td>前往下一个Node处</td>
</tr>
<tr>
<td>P</td>
<td>前往上一个Node处</td>
</tr>
<tr>
<td>U</td>
<td>向上移动一层</td>
</tr>
<tr>
<td>Tab</td>
<td>在Node节点间移动（有 node 的地方，通常会以 * 显示）</td>
</tr>
<tr>
<td>空白键 &#x2F; Page Down</td>
<td>向下翻一页</td>
</tr>
<tr>
<td>Page Up</td>
<td>向上翻一页</td>
</tr>
<tr>
<td>Enter</td>
<td>光标在Node上时，可以进入该Node节点</td>
</tr>
<tr>
<td>b</td>
<td>移动光标到该 info 画面当中的第一个 node 处</td>
</tr>
<tr>
<td>e</td>
<td>移动光标到该 info 画面当中的最后一个 node 处</td>
</tr>
<tr>
<td>s  或  &#x2F;</td>
<td>在 info page 当中进行搜索</td>
</tr>
<tr>
<td>h 或 ?</td>
<td>显示求助菜单</td>
</tr>
<tr>
<td>q</td>
<td>退出</td>
</tr>
</tbody></table>
<h3 id="其他有用的文件（documents）"><a href="#其他有用的文件（documents）" class="headerlink" title="其他有用的文件（documents）"></a>其他有用的文件（documents）</h3><p>在<code>/usr/share/doc</code>目录下，数据主要是以套件（packages）为主的，例如 git 的相关信息在 &#x2F;usr&#x2F;share&#x2F;doc&#x2F;git</p>
<h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><p>在 Linux 下面，有很多人在主机上面工作，直接按下电源开关来关机时，则其他人的数据可能就此中断。若不正常关机，则可能造成文件系统的毁损（因为来不及将数据回写到文件中，所以有些服务的文件会有问题！），所以关机需要注意：</p>
<ul>
<li><p>观察系统的使用状态：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看谁在线</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ <span class="built_in">who</span></span><br><span class="line"><span class="comment"># 查看网络连线状态</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ netstat -a</span><br><span class="line"><span class="comment"># 查看执行程序</span></span><br><span class="line">[<span class="built_in">test</span>@172-12-0-1 /]$ ps -aux</span><br></pre></td></tr></table></figure>
</li>
<li><p>通知线上使用者关机的时刻，使用 <code>shutdown </code>指令</p>
</li>
</ul>
<p>几个与关机相关的命令</p>
<ul>
<li>将数据同步写入硬盘中的指令： sync<ul>
<li>在Linux系统中，为了加快数据的读取速度，所以在默认的情况中，某些已经载入内存中的数据将不会直接被写回硬盘，而是先暂存在内存当中</li>
<li>使用root账号执行，可以更新整个系统中的数据，否则只能更新单个用户的数据</li>
</ul>
</li>
<li>惯用的关机指令： shutdown</li>
<li>重新开机，关机： reboot &#x2F; halt &#x2F; poweroff<ul>
<li>这些指令在关机前进行了 sync 这个工具的调用</li>
<li>这些指令都是调用 systemctl 这个重要的管理命令</li>
</ul>
</li>
</ul>
<h1 id="三、Linux的文件权限与目录配置"><a href="#三、Linux的文件权限与目录配置" class="headerlink" title="三、Linux的文件权限与目录配置"></a>三、Linux的文件权限与目录配置</h1><p>未完待续…</p>
<p>七、Linux文件与目录管理</p>
<p>八、Linux磁盘与文件系统管理</p>
<p>九、文件与文件系统的压缩、打包与备份</p>
<p>十、Vim程序编辑器</p>
<p>十一、认识与学习BASH</p>
<p>十二、正则表达式与文件格式化处理</p>
<p>十三、学习Shell Scripts</p>
<p>十四、Linux账号管理与ACL权限设置</p>
<p>十五、磁盘配额（Quota）与进阶文件系统管理</p>
<p>十六、例行组工作调度（crontab）</p>
<p>十七、程序管理与SELinux初探</p>
<p>十八、认识系统服务（daemons）</p>
<p>十九、认识与分析登录文件</p>
<p>二十、开机流程、模块管理与Loader</p>
<p>二十一、基础系统设置与备份策略</p>
<p>二十二、软件安装：源代码与TarBall</p>
<p>二十三、软件安装：RPM、SRPM与YUM</p>
<p>二十四、X WINDOW设置介绍</p>
<p>二十五、Linux核心编译与管理</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora使用教程</title>
    <url>/2024/07/24/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC] </p>
<h3 id="一、Typora安装"><a href="#一、Typora安装" class="headerlink" title="一、Typora安装"></a><strong>一、Typora安装</strong></h3><h4 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a><strong>1、下载</strong></h4><p>Typora中文官网：<a href="https://typoraio.cn/">https://typoraio.cn/</a><br>Typora官网：<a href="https://typora.io/releases/all">https://typora.io/releases/all</a></p>
<h4 id="2、激活"><a href="#2、激活" class="headerlink" title="2、激活"></a><strong>2、激活</strong></h4><ol>
<li>用编辑器打开<code>D:\Program Files\Typora\resources\page-dist\static\js\LicenseIndex.180dd4c7.4da8909c.chunk.js</code>，将 <code>e.hasActivated=&quot;true&quot;==e.hasActivated</code>  替换为 <code>e.hasActivated=&quot;true&quot;==&quot;true&quot;</code></li>
<li>关闭软件每次启动时的已激活弹窗，用编辑器打开<code>D:\Program Files\Typora\resources\page-dist\license.html</code>，将  <code>&lt;/body&gt;&lt;/html&gt;</code> 替换为 <code>&lt;/body&gt;&lt;script&gt;window.οnlοad=function()&#123;setTimeout(()=&gt;&#123;window.close();&#125;,5);&#125;&lt;/script&gt;&lt;/html&gt;</code></li>
<li>去除左下角软件未激活提示，用编辑器打开<code>D:\Program Files\Typora\resources\locales\zh-Hans.lproj\Panel.json</code>，将 <code>&quot;UNREGISTERED&quot;:&quot;未激活&quot;</code> 替换为 <code>&quot;UNREGISTERED&quot;:&quot; &quot;</code>，激活成功。</li>
</ol>
<h4 id="3、鼠标右键新建-Markdown-文件"><a href="#3、鼠标右键新建-Markdown-文件" class="headerlink" title="3、鼠标右键新建 Markdown 文件"></a><strong>3、鼠标右键新建 Markdown 文件</strong></h4><p>新建一个<strong>txt</strong> 文本文件，写入以下内容，然后将后缀 <code>.txt</code> 改名<code>.reg</code>，该文件为注册表项，双击运行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5.00</span></span><br><span class="line"> </span><br><span class="line">[<span class="type">HKEY_CLASSES_ROOT</span>\<span class="type">.md</span>]</span><br><span class="line"><span class="selector-tag">@</span>=<span class="string">&quot;Typora.md&quot;</span></span><br><span class="line"><span class="string">&quot;Content Type&quot;</span>=<span class="string">&quot;text/markdown&quot;</span></span><br><span class="line"><span class="string">&quot;PerceivedType&quot;</span>=<span class="string">&quot;text&quot;</span></span><br><span class="line"> </span><br><span class="line">[<span class="type">HKEY_CLASSES_ROOT</span>\<span class="type">.md</span>\<span class="type">ShellNew</span>]</span><br><span class="line"><span class="string">&quot;NullFile&quot;</span>=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 右键新建<code>markdown</code>文件以后，可能会发现文件有几十MB那么大。</p>
</blockquote>
<blockquote>
<p> 解决方法：<code>win+R</code>后输入<code>regedit</code>打开注册表，打开路径<code>\HKEY_CLASSES_ROOT\.md\ShellNew</code></p>
<p>删除多余的文件，只保留两项（<code>默认</code>和<code>NullFile</code>）。然后关闭注册表</p>
</blockquote>
<h4 id="4、目前发现只能打开一个窗口，暂未找到解决办法"><a href="#4、目前发现只能打开一个窗口，暂未找到解决办法" class="headerlink" title="4、目前发现只能打开一个窗口，暂未找到解决办法"></a><strong>4、目前发现只能打开一个窗口，暂未找到解决办法</strong></h4><h3 id="二、常用快捷键"><a href="#二、常用快捷键" class="headerlink" title="二、常用快捷键"></a><strong>二、常用快捷键</strong></h3><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>ctrl + /</code></td>
<td align="left">切换 源代码模式&#x2F;预览模式</td>
</tr>
<tr>
<td align="left"><code>ctrl + 1 ~6</code></td>
<td align="left">一 ~ 六级标题，最多六级标题，<code>ctrl + 0</code>清除</td>
</tr>
<tr>
<td align="left"><code>ctrl + B</code></td>
<td align="left">粗体</td>
</tr>
<tr>
<td align="left"><code>ctrl + i 斜体</code></td>
<td align="left">斜体</td>
</tr>
<tr>
<td align="left"><code>ctrl + T</code></td>
<td align="left">表格</td>
</tr>
<tr>
<td align="left">&#96;&#96;&#96;&#96; + Enter<code>或</code>Ctrl + Shift + k&#96;</td>
<td align="left">代码块</td>
</tr>
<tr>
<td align="left"><code>&gt; + 空格</code></td>
<td align="left">引用</td>
</tr>
<tr>
<td align="left"><code>\ + 字符</code></td>
<td align="left">转义</td>
</tr>
<tr>
<td align="left"><code>Ctrl + u</code></td>
<td align="left">下划线</td>
</tr>
<tr>
<td align="left"><code>alt + shift + 5</code> 或 <code>~~内容~~</code></td>
<td align="left">删除线</td>
</tr>
<tr>
<td align="left"><code>--- + Enter</code>  或 <code>*** + Enter</code></td>
<td align="left">分割线</td>
</tr>
<tr>
<td align="left"><code>- + 空格</code> 或 <code>* + 空格</code> 或 <code>Ctrl + Shift + ]</code></td>
<td align="left">无序列表</td>
</tr>
<tr>
<td align="left"><code>数字 + . + 空格</code> 或 <code>Ctrl + Shift + [</code></td>
<td align="left">有序列表，降级：<code>Tab</code>，升级：<code>Shift + Tab</code></td>
</tr>
<tr>
<td align="left">- 内容，选中后右键选择<code>任务列表</code></td>
<td align="left">- 任务列表</td>
</tr>
<tr>
<td align="left"><code>[TOC] + Enter</code></td>
<td align="left">生成目录</td>
</tr>
<tr>
<td align="left"><code>Ctrl + L</code></td>
<td align="left">选中一整行</td>
</tr>
<tr>
<td align="left"><code>Ctrl + d</code></td>
<td align="left">选中单词</td>
</tr>
<tr>
<td align="left"><code>Ctrl + e</code></td>
<td align="left">选中相同格式的文字(例如：加粗、斜体)</td>
</tr>
<tr>
<td align="left"><code>Ctrl + home</code></td>
<td align="left">跳转到文章开头</td>
</tr>
<tr>
<td align="left"><code>Ctrl + end</code></td>
<td align="left">跳转到文章结尾</td>
</tr>
<tr>
<td align="left"><code>Ctrl + f</code></td>
<td align="left">搜索</td>
</tr>
<tr>
<td align="left"><code>Ctrl + h</code></td>
<td align="left">替换</td>
</tr>
<tr>
<td align="left"><code>Ctrl + k</code></td>
<td align="left">插入链接</td>
</tr>
<tr>
<td align="left"><code>$$ + Enter</code></td>
<td align="left">数学公式</td>
</tr>
<tr>
<td align="left"><code>: + 单词 + :</code></td>
<td align="left">表情（<a href="https://www.webfx.com/tools/emoji-cheat-sheet/">常用表情</a>）:coffee:</td>
</tr>
<tr>
<td align="left"><code>直接拖动到指定位置</code> 或 <code>Ctrl + Shift + i</code></td>
<td align="left">插入图片（图片可以直接拖进来，但是图片是相对路径，只能在本地使用，如果要放到博客中，要用绝对路径）</td>
</tr>
<tr>
<td align="left"><code>&lt;sub&gt;内容&lt;/sub&gt;</code></td>
<td align="left"><sub>下标</sub></td>
</tr>
<tr>
<td align="left"><code>&lt;sup&gt;内容&lt;/sup&gt;</code></td>
<td align="left"><sup>上标</sup></td>
</tr>
<tr>
<td align="left"><code> [+^+脚注]</code></td>
<td align="left">[^脚注] （<strong>最前面有个空格</strong>）</td>
</tr>
<tr>
<td align="left"><code>==内容==</code></td>
<td align="left">&#x3D;&#x3D;高亮&#x3D;&#x3D;</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Shift + </code> &#96;</td>
<td align="left">着重</td>
</tr>
<tr>
<td align="left"><del><code>+ 内容 +</code></del></td>
<td align="left"><del>淡化</del></td>
</tr>
<tr>
<td align="left"><code>Ctrl + \</code></td>
<td align="left">清除格式</td>
</tr>
<tr>
<td align="left"><code>&lt;center&gt;+居中内容+&lt;center&gt;</code></td>
<td align="left">居中</td>
</tr>
<tr>
<td align="left"><code>&lt;p align=&quot;right&quot;&gt;右对齐&lt;/p&gt;</code></td>
<td align="left">右对齐</td>
</tr>
<tr>
<td align="left"><code>&lt;p align=&quot;left&quot;&gt;左对齐&lt;/p&gt;</code></td>
<td align="left">左对齐</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">操作相关</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><code>Ctrl + N</code></td>
<td align="left">新建</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Shift + N</code></td>
<td align="left">新建窗口</td>
</tr>
<tr>
<td align="left"><code>Ctrl + O</code></td>
<td align="left">打开</td>
</tr>
<tr>
<td align="left"><code>Ctrl + P</code></td>
<td align="left">快速打开</td>
</tr>
<tr>
<td align="left"><code>Ctrl + S</code></td>
<td align="left">保存</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Shift + S</code></td>
<td align="left">另存为</td>
</tr>
<tr>
<td align="left"><code>Ctrl + W</code></td>
<td align="left">关闭</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Z</code></td>
<td align="left">撤销</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Y</code></td>
<td align="left">重做</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+C</code></td>
<td align="left">复制为<code>MarkDown</code></td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+V</code></td>
<td align="left">粘贴为纯文本</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+1</code></td>
<td align="left">大纲视图</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+2</code></td>
<td align="left">文档列表视图</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+3</code></td>
<td align="left">文件树视图</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+L</code></td>
<td align="left">显示隐藏侧边栏</td>
</tr>
<tr>
<td align="left"><code>F8</code></td>
<td align="left">专注模式</td>
</tr>
<tr>
<td align="left"><code>F9</code></td>
<td align="left">打字机模式</td>
</tr>
<tr>
<td align="left"><code>F11</code></td>
<td align="left">切换全屏</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Shift+0</code></td>
<td align="left">实际大小</td>
</tr>
<tr>
<td align="left"><code>Ctrl + Shift+ +/-</code></td>
<td align="left">放大&#x2F;缩小</td>
</tr>
<tr>
<td align="left"><code>Ctrl+Tab</code></td>
<td align="left">应用内窗口切换</td>
</tr>
<tr>
<td align="left"><code>Shift+F12</code></td>
<td align="left">打开<code>DevTools</code></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>​	</p>
<p>你掌握了以上操作了吗？</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 是</li>
<li><input disabled="" type="checkbox"> 否</li>
</ul>
<h3 id="三、-生成pdf、html等文件"><a href="#三、-生成pdf、html等文件" class="headerlink" title="三、 生成pdf、html等文件"></a><strong>三、 生成pdf、html等文件</strong></h3><p>文件→导出→选择要导出文件的格式</p>
<h3 id="四、画图"><a href="#四、画图" class="headerlink" title="四、画图"></a><strong>四、画图</strong></h3><p>以下内容参考博客：<a href="https://blog.csdn.net/whatday/article/details/88655461">markdown 画图_markdown graph subgraph-CSDN博客</a></p>
<ol>
<li><h4 id="graph-流程图"><a href="#graph-流程图" class="headerlink" title="graph 流程图"></a>graph 流程图</h4><ul>
<li><code>TB</code>：从上到下</li>
<li><code>TD</code>：从上到下</li>
<li><code>BT</code>：从下到上</li>
<li><code>RL</code>：从右到左</li>
<li><code>LR</code>：从左到右</li>
</ul>
<h5 id="节点形状"><a href="#节点形状" class="headerlink" title="节点形状"></a><strong>节点形状</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">默认节点 A</span><br><span class="line">文本节点 B[bname]</span><br><span class="line">圆角节点 C(cname)</span><br><span class="line">圆形节点 D((dname))</span><br><span class="line">非对称节点 E&gt;ename]</span><br><span class="line">菱形节点 F&#123;fname&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> A~F 是当前节点名字，类似于变量名，画图时便于引用</p>
</blockquote>
<blockquote>
<p> [b~f]name是节点中显示的文字，默认节点的名字和显示的文字都为A</p>
</blockquote>
   <pre class="mermaid">      graph LR;
       A-->B[文本]
       B[文本]-->C(圆角)
       C(圆角)-->D((圆形))
       D((圆形))-->E>非对称节点]
       E>非对称节点]-->F{菱形}
       F{菱形}-->A</pre>

<h5 id="连线"><a href="#连线" class="headerlink" title="连线"></a><strong>连线</strong></h5><p>节点间的连接线有多种形状，可以在连接线中加入标签：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">箭头连接 A1–-&gt;B1</span><br><span class="line">开放连接 A2—B2</span><br><span class="line">标签连接 A3–text—B3</span><br><span class="line">箭头标签连接 A4–text–&gt;B4</span><br><span class="line">虚线开放连接 A5.-B5</span><br><span class="line">虚线箭头连接 A6-.-&gt;B6</span><br><span class="line">标签虚线连接 A7-.text.-B7</span><br><span class="line">标签虚线箭头连接 A8-.text.-&gt;B8</span><br><span class="line">粗线开放连接 A9===B9</span><br><span class="line">粗线箭头连接 A10==&gt;B10</span><br><span class="line">标签粗线开放连接 A11==text===B11</span><br><span class="line">标签粗线箭头连接 A12==text==&gt;B12</span><br></pre></td></tr></table></figure>

<pre class="mermaid">   graph TB
  A1-->B1
  A2---B2
  A3--text---B3
  A4--text-->B4
  A5-.-B5
  A6-.->B6
  A7-.text.-B7
  A8-.text.->B8
  A9===B9
  A10==>B10
  A11==text===B11
  A12==text==>B12</pre>

<h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><pre class="mermaid">   
graph LR
  start("input x") --> handler("x > 0?")
  handler --yes--> yes("output x")
  handler --no--> start
  yes --> exit("exit")</pre>



</li>
<li><h4 id="flow-流程图"><a href="#flow-流程图" class="headerlink" title="flow 流程图"></a>flow 流程图</h4><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a><strong>关键字</strong></h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start/end，表示程序的开始与结束</span><br><span class="line">operation，表示程序的处理块</span><br><span class="line">subroutine，表示子程序块</span><br><span class="line">condition，表示程序的条件判断</span><br><span class="line">inputoutput，表示程序的出入输出</span><br><span class="line">right/left，表示当前连线在当前模块上的起点(默认从下端开始)</span><br><span class="line">yes/no， 表示condition判断的分支(可以和right，left同时使用)</span><br></pre></td></tr></table></figure>

<p>通过定义模块与连接，再结合以上关键词即可定义简单流程图的各个模块。</p>
<p>模块定义(模块标识与模块名称可以任意定义名称，但是不能为关键词)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块标识(相当于变量名)=&gt;模块关键词: 模块名称(模块中显示的文字)</span><br></pre></td></tr></table></figure>

<p>连接定义如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块标识1-&gt;模块标识2</span><br><span class="line">模块标识1-&gt;模块标识2-&gt;模块标识3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>进行连接的时候，可以通过<code>right</code>，<code>left</code>确定箭头的起点。</p>
<p>使用<code>condition</code>关键词定义的判断框的连接需要结合yes或者no使用，如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cond1=&gt;condition: x&gt;0?</span><br><span class="line">cond1(yes)-&gt;module1</span><br><span class="line">cond1(no)-&gt;moudle2</span><br><span class="line"> </span><br><span class="line"># 指定方向,如果后面占用了这个方向, 前面的无效   </span><br><span class="line">cond1(yes,right)-&gt;module1</span><br><span class="line">cond1(no)-&gt;moudle2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 先自定义变量,然后画图</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 输入x</span><br><span class="line">sub=&gt;subroutine: 是否重新输入</span><br><span class="line">cond1=&gt;condition: x&gt;0?</span><br><span class="line">cond2=&gt;condition: yes/no </span><br><span class="line">io=&gt;inputoutput: 输出x  </span><br><span class="line"> </span><br><span class="line">st(right)-&gt;op-&gt;cond1</span><br><span class="line">cond1(yes)-&gt;io(right)-&gt;e</span><br><span class="line">cond1(no)-&gt;sub(right)-&gt;cond2()</span><br><span class="line">cond2(yes, right)-&gt;op</span><br><span class="line">cond2(no)-&gt;e</span><br></pre></td></tr></table></figure>

<div id="flowchart-0" class="flow-chart"></div></li>
</ol>
<script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">   st=>start: 开始
   e=>end: 结束
   op=>operation: 输入x
   sub=>subroutine: 是否重新输入
   cond1=>condition: x>0?
   cond2=>condition: yes/no 
   io=>inputoutput: 输出x  
    
   st(right)->op->cond1
   cond1(yes)->io(right)->e
   cond1(no)->sub(right)->cond2()
   cond2(yes, right)->op
   cond2(no)->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      <tags>
        <tag>软件使用教程</tag>
      </tags>
  </entry>
</search>
